#ifndef _KRTAPI_H_
#define _KRTAPI_H_


#pragma warning(disable : 4996) // for VC 8.00

/*
krtapi.h (C) Vitaly Bogomolov 2000-2003

Данный файл предназначен для программиста, создающего программу 
для представления записи снаряда-дефектоскопа (драйвер снаряда) в программе 
просмотра и анализа.
Программа просмотра не имеет прямого доступа к записи конкретного снаряда, 
а взаимодействует с драйвером конкретного снаряда, который производит чтение 
соответствующей записи и представление записанной информации программе просмотра 
по оговоренным в этом файле правилам. Такая схема работы программы позволят 
просматривать записи произвольного формата при условии наличия драйвера 
этого формата.
Программа рассчитана на снаряды-дефектоскопы работающие на основе магнитного 
метода.
Драйвер может быть написан на любом языке программирования, транслятор которого 
может создавать приложения win32 dll. 
При написании драйвера на языке программирования, отличном от C/C++, 
программисту необходимо обеспечить обеспечить идентичность структур данных, 
констант, прототипов функций с файлом krtapi.h. 
Кроме этого необходимо обеспечить одинаковый тип выравнивания структур данных, 
определенных в krtapi.h (выравнивание на 1 байт).
*/
/*
 History:

 AW 23.01.01 
 + поддержка compiler.h
 + исправлены опечатки
 + krtOK, krtERR
 Vit 28.01.01
 + исправлено обьявление функции krtDrvError (char -> char *)
 Vit 03.02.01
 + изменен тип данных дескриптора прогона (unsigned int -> short)
 + драйвер не возвращает свой дескриптор, а использует переданный сверху.
   соответственно изменены обьявление функции открытия прогона, структура
   которую заполняет эта функция и описательная часть в начале файла.
 Vit 08.04.03
 + получение информации о возможностях драйвера перенесено из 
   krtDriverInfo в krtOpenTrace.
 Vit 11.04.03
 + Улучшенная подержка функции регистрации записи: сообщение об ошибке и 
   call-back функция для индикации процента выполненной работы и прерывания
   работы пользователем.
*/
/***********************************************************
Модель взаимодействия драйвера с программой просмотра записи

Допущения модели:
1. Датчики корозионной развертки расположены по окружности трубы последовательно
и равномерно. Т.е. если снаряд имеет четыре датчика, то каждый датчик занимает
сектор в 90 градусов и сектора расположены друг за другом.

Драйвер взаимодействует с программой просмотра при помощи экспортируемых 
функций. Программа просмотра вызывает экспортируемые драйвером функции по имени. 
Для того чтобы подавить манглинг имен функций, производимый некоторыми 
трансляторами (например компиляторами C++) экспортируемые функции должный быть 
определены как extern "C". Соответствующие декларации имеются в файле krtapi.h.

Драйвер должен экпортировать следующие функции: krtDriverInfo, krtOpenTrace, 
krtCloseTrace. Если драйвер не экспортирует какую то из этих трех функций, 
то при загрузке драйвера программой просмотра будет выдано сообщение об ошибке.

Функция krtDriverInfo  вызывается первой. При вызове данной функции программе 
просмотра в структуре T_DRVINFO передается информация о версии API, используемой
драйвером и о наличии у драйвера функции регистрации прогона.

Функция регистрации прогона используется для создания файла описания прогона, 
который необходим для функции открытия прогона krtOpenTrace. 
Регистрационная информация записывается функцией регистрации в файл описания 
прогона, имя которого передается ей как аргумент. Файл описания прогона является 
текстовым файлом, имеющим структуру ini-файла Windows. Программа просмотра 
записывает в этот файл сведения о типе драйвера, которым надо смотреть этот 
прогон и текстовое описание прогона. Функция регистрации прогона в драйвере 
должна записывать необходимую для драйвера информацию в секцию DRIVER_DATA. 
Данная константа определена в файле krtapi.h. 

Если драйвер не поддерживает функцию регистрации прогона, то соответствующую 
информацию в файл описания прогона должна записать внешняя утилита регистрации 
прогона, либо эти данные должны быть внесены туда вручную.

После вызова функции krtDriverInfo и получения информации о драйвере программа 
просмотра вызывает функцию krtOpenTrace при начале работы с конкретной записью 
прогона. 

В качестве аргумента функции krtOpenTrace передается адрес структуры описания 
записи, имя файла описания прогона и дескриптор прогона (целое неотрицательное 
число) по которому при дальнейшей работе программа просмотра будет ссылаться 
на этот прогон. Вызов функции krtOpenTrace происходит в два этапа (см. описание
функции).

В структуре описания записи драйвер передает информацию о характеристиках 
снаряда, поддерживаемых драйвером и адреса функций, реализующих поддержку этих 
характеристик. В дальнейшем программа просмотра, основываясь на этой информации, 
вызывает соответствующие функции драйвера для чтения файла записи прогона. 
Так как взаимодействие драйвера с программой просмотра при работе с файлом 
прогона осуществляется через структуру T_DRVINFO данные в этой структуре должны 
иметь одинаковое выравнивание в программе просмотра и в драйвере. 
Исходя из этого требования драйвер должен быть скомпилирован с опцией 
"выравнивание структур на 8 бит". Соответствующие директивы #PRAGMA для 
некоторых трансляторов включены в состав файла krtapi.h.

Уникальность дескрипторов прогона обеспечивается программой просмотра.
Дескриптор прогона передается всем функциям драйвера для ссылки на конкретный 
прогон, так как программа просмотра может открыть в одном сеансе несколько 
прогонов при помощи одного драйвера. 
Драйвер должен обеспечивать независимость и изолированность данных для каждого 
прогона, адресуемого дескриптором.
Файл описания прогона должен быть предварительно создан при вызове 
функции регистрации прогона из драйвера, либо внешней программой регистрации 
прогона. 

Функция krtCloseTrace используется для закрытия прогона, адресуемого конкретным 
дескриптором и освобождения ресурсов, задействованных при открытии прогона.

*/

#ifdef _MSC_VER
/*
 * Disable following warnings when including Windows headers
 *
 * warning C4115: named type definition in parentheses
 * warning C4116: unnamed type definition in parentheses
 * warning C4201: nonstandard extension used : nameless struct/union
 * warning C4214: nonstandard extension used : bit field types other than int
 */
#pragma warning( disable : 4115 4116 4201 4214)
#endif

#include <windows.h>

#ifdef _MSC_VER
/*
 * Re-enable all
 */
#pragma warning( default : 4115 4116 4201 4214)
#endif

#include "krtBase.h"

#define KRT_APIVER      1     // для драйверов версии 1 API
#define BYTE unsigned char    // байтовый тип данных
#define KRTDATA BYTE          // тип обработанных данных развертки

#define KRT_PALLETE_SIZE 200  // размер палитры

// структура описания пояса датчиков развертки
typedef struct {      
 long num;      // кол-во датчиков в поясе
 long type;     // тип датчиков (SENS_TYPE_*)
 long minValue; // минимальное значение показаний датчика (единицы АЦП)
 long maxValue; // максимальное значение показаний датчика (единицы АЦП)
 long isRow;     // 1/0 если 0 сырые данные не поддерживаются
 long maxRowVal; // максимальное значение сырых данных 
 long minRowVal; // максимальное значение сырых данных 
} T_SENSGROUP;

// структура описания вспомогательного датчика
typedef struct {      
 long minValue; // минимальное значение показаний датчика (единицы АЦП)
 long maxValue; // максимальное значение показаний датчика (единицы АЦП)
 char name[EXT_SENS_NAME_LENGTH]; // описание датчика 
} T_EXTSENS;

// указатель на функцию чтения показаний датчиков развертки.
// если NULL, информация о развертке не поддерживается.
// возвращает KRT_OK при успехе, KRT_ERR при ошибке.
typedef long (KRTAPI *drvFillData) (

  KRTHANDLE handle,      // дескриптор прогона

  long group,            // индекс пояса датчиков развертки, из которого надо
                         // считать данные.

  long start,            // начальная позиция считываемого фрагмента развертки
                         // на трассе.
                         // позиция задается в единицах одометра или таймера
                         // в зависимости от режима опроса датчиков, принятого
                         // для данногоснаряда

  long length,           // длина считываемого участка развертки
                         // задается в единицах одометра или таймера
                         // в зависимости от режима опроса датчиков, принятого
                         // для данногоснаряда

  KRTDATA *screen,       // указатель на массив, который необходимо заполнить 
                         // информацией о датчиках развертки. 
                         // Элемент массива число типа BYTE, которое может
                         // принимать значение от 0 до KRT_PALLETE_SIZE - 1
                         // драйвер должен транслировать показания датчиков 
                         // снаряда в указанный диапазон согласно своей 
                         // внутренней логике и настройкам бортовой 
                         // измерительной аппаратуры имея в в виду, что 
                         // итоговый результат должен отражать интенсивность 
                         // изменения магнитного поля, измеренное датчиком. 
                         // Фактически это означает, что при сжатии данных 
                         // развертки в программе просмотра из группы показаний
                         // датчиков, сжимаемых в один пиксел экрана выбирается
                         // наибольшее показание. При таком алгоритме сжатия 
                         // не должно происходить потерь значимой информации. 
                         // Количество строк массива равно значению
                         // поля num структуры T_SENSGROUP, описывающей
                         // соответствующий пояс датчиков развертки
                         // Количество столбцов массива равно длине участка 
                         // развертки (аргумент length) деленному на значение
                         // поля stepSize структуры T_SENSGROUP
                         // Строки развертки должны заполняться драйвером с
                         // учетом физического поворота снаряда на данном участке

  long *rowData          // указатель на массив, который необходимо заполнить 
                         // информацией о датчиках развертки в виде сырых данных. 
                         // этот массив аналогичен предыдущему массиву screen, 
                         // за исключением размерности элемента массива. 
                         // массив rowData содержит элементы размером (sizeof long)
);

//////////////////////////////////////////////////////////////////////////
// Конец описания типов данных callback - функций
//////////////////////////////////////////////////////////////////////////

// структура описания прогона, открываемого для работы.
typedef struct {

 long sensGroups;    // кол-во поясов датчиков развертки
 long extSensors;    // кол-во вспомогательных датчиков
 long askMetod;      // метод опроса датчиков (SENS_ASK_*)
 long stepSize;      // дискретность опроса датчиков (мм/милисек)

 T_SENSGROUP *group; // указатель на массив структур описания поясов 
                     // датчиков развертки
                     // размер массива задан полем sensGroups

 T_EXTSENS *extSens; // указатель на массив структур описания 
                     // вспомогательных датчиков
                     // размер массива задан полем extSensors

 // VOG функция
 long vog;           // 1 или 0

 // каналы толщины стенки трубы
 long wallThickNum;  // количество каналов
 long wallThickMin;  // минимальное значение канала 
 long wallThickMax;  // максимальное значение канала 

 // таймеры (милисекунды прогона)
 long timerNum;      // количество   
 long timerStep;     // дискретность измерения (микросек)

 // одометры (милиметры дистанции)
 long odoNum;        // количество   
 long odoStep;       // дискретность измерения (мм)

 // датчики ориентации (град наклона верх.датчика ПЧС от 0 до 360)
 long orientNum;     // количество
 long orientStep;    // дискретность измерения (мм/милисек - от метода опроса)

 // датчики ускорения (единицы АЦП)
 long shakeNum;      // количество
 long shakeStep;     // дискретность измерения (мм/милисек - от метода опроса)

 // датчики давления (МПа???)
 long pressNum;      // количество                                            
 long pressStep;     // дискретность измерения (мм/милисек - от метода опроса)
                     
 // датчики температуры (градусы цельсия)
 long tempNum;       // количество                                            
 long tempStep;      // дискретность измерения (мм/милисек - от метода опроса)

 // датчики угловых скоростей (единицы АЦП)
 long angleNum;      // количество                                            
 long angleStep;     // дискретность измерения (мм/милисек - от метода опроса)

 // Внимание!!! Поля, определяющие дискретность измерения доп.датчиков (timerStep, odoStep и т.п.) 
 // используются для справки, чтобы можно было оценить достоверность графиков на заданном диапазоне.
 // Эти поля не влияют на кол-во вызовов функции krtDrvGetNextNode. Данная функция вызывается до
 // тех пор, пока значение поля Pos структуры T_NODE не окажется за пределами интересующего 
 // диапазона.

 // Callback - Функции
 drvErrorFunc           krtDrvError;
 drvGetFirstNode        krtDrvGetFirstNode;
 drvGetNextNode         krtDrvGetNextNode;
 drvGetFirstNodeGroup   krtDrvGetFirstNodeGroup;
 drvGetNextNodeGroup    krtDrvGetNextNodeGroup;
 drvFillData            krtDrvFillData;

 // параметры записи

 long length;            // длина трассы в мм
 long time;              // продолжительность прогона в секундах

 long speedMin;          // минимальная скорость снаряда на трассе в см/сек
 long speedMax;          // максимальная скорость снаряда на трассе в см/сек

 long shakeMin;          // минимальное значение датчиков ускорения
 long shakeMax;          // максимальное значение датчиков ускорения

 long pressMin;          // минимальное значение датчиков давления
 long pressMax;          // максимальное значение датчиков давления

 long tempMin;            // минимальное значение датчиков температуры
 long tempMax;            // максимальное значение датчиков температуры

 long angleMin;           // минимальное значение датчиков угловых скоростей
 long angleMax;           // минимальное значение датчиков угловых скоростей

} T_TRACEINFO;

//////////////////////////////////////////////////////////////////////////
// типы данных указателей функций, экспортируемых драйвером
//////////////////////////////////////////////////////////////////////////

// функция открывает прогон для работы и заполняет информацией о нем структуру inf.
// возвращает KRT_OK при успехе, KRT_ERR при ошибке.
typedef long (KRTAPI *drv_OpenTrace)  (

// Данная функция вызывается в два этапа. При первом вызове
// в аргументе draft передается значение 1 и все поля структуры T_TRACEINFO
// инициализированы нулями.
// При этом первом вызове функция должна заполнить следующие поля
// структуры T_TRACEINFO:

// В поле sensGroups драйвер записывает информацию о количестве поясов датчиков развертки. 

// В поле extSensors драйвер записывает информацию о количестве вспомогательных
// датчиков на данном типе снаряда.

// В поле krtDrvError драйвер записывает адрес функции, возвращающей текстовую 
// строку описания последней ошибки при работе с прогоном, заданным дескриптором.
// Это необходимо, чтобы драйвер мог описать причины ошибки, возникщей при 
// открытии прогона.

// После этого первого вызова программа просмотра, основываясь на возвращенных
// значениях полей sensGroups и extSensors, выделяет необходимые по размеру
// области памяти, чтобы разместить описание всех поясов датчиков развертки и
// всех вспомогательных датчиков и записывает указатели на эти области памяти
// в поля group и extSens соответственно.

// После этого программа просмотра делает второй вызов функции krtOpenTrace.
// Аргумент draft при этом равен 0, а в структуре T_TRACEINFO имеются корректно
// инициализированные указатели на массивы, которые могут иметь разный размер
// у разных драйверов. Во время этого второго вызова функция заполняет все
// структуры данными о поддерживаемых драйвером режимах.

 const char * traceFile, // имя trc-файла, созданного при регистрации 
                         // прогона. В секции DRIVER_DATA данного файла
                         // должна содержаться вся необходимая информация
                         // для работы с прогоном (местоположение файла/ов
                         // данных, статистика по прогону и т.д.)

 KRTHANDLE handle,       // дескриптор прогона. в случае неуникальности
                         // дескриптора нужно вернуть KRT_ERR

 T_TRACEINFO *inf,       // указатель на структуру T_TRACEINFO, которую 
                         // необходимо заполнить информацией о прогоне.

 long draft              // признак первого/второго вызова (1/0)

);

// функция закрывает прогон и освобождает ресурсы, занятые при его открытии.
// возвращает KRT_OK при успехе, KRT_ERR при ошибке.
typedef long (KRTAPI *drv_CloseTrace) (

  KRTHANDLE handle       // дескриптор прогона

);

//////////////////////////////////////////////////////////////////////////
// Функции экспортируемые драйвером

long EXPORT KRTAPI krtOpenTrace  (
 const char * traceFile,  
 KRTHANDLE handle,       
 T_TRACEINFO *inf,        
 long draft              
);

long EXPORT KRTAPI krtCloseTrace (
  KRTHANDLE handle
);

#endif