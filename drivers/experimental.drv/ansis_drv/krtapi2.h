#ifndef _KRTAPI2_H_
#define _KRTAPI2_H_

#include <krtBase.h>

////////////////////////////////////////////////////////////////////////
// krtapi2.h (C) Vitaly Bogomolov 2006
// определения для драйверов версии API 2
////////////////////////////////////////////////////////////////////////

#define KRT_APIVER2     2     // для драйверов версии 2 API

#define BYTE unsigned char    // байтовый тип данных
#define KRTDATA BYTE          // тип обработанных данных развертки
#define KRT_PALLETE_SIZE 200  // размер палитры

// типы записей 
typedef enum { 

 PIG_DIRECT = 0,     // внутритрубный
 PIG_SPIRAL = 1      // внешнетрубный

} PIG_TYPE;
 
// типы событий прогона
typedef enum { 

 EVNT_STOP = 1,      // остановка
 EVNT_UVD  = 2,      // переключение УВД
 EVNT_ODO  = 4,      // переключение одометра
 EVNT_STEP = 8       // переключение шага опроса

} KRT_EVNT;

// структура в которой драйвер возвращает информацию о событиях прогона
// через функцию krtDrvEvent
typedef struct {      

 KRT_EVNT type;      // тип события (KRT_EVNT)
 long pos;           // положение события на трассе (мм)
 long param1;        // параметры события
 long param2;        

} T_EVENT;

// структура сообщения о поступлении новых данных
typedef struct {
 long start;         // начало участка новых данных
 long length;        // длина участка новых данных
} T_ArrivedData;

//////////////////////////////////////////
// типы данных используемых функций
//////////////////////////////////////////

// callback функция, вызываемая в процессе регистрации записи. 
// Возвращает 0 если работу можно продолжать и 1 если 
// пользователь запросил отмену регистрации.
// Аргумент percentDone должен содержать число от 0 до 100 для
// информирования пользователя о текущем обьеме выполнения работы.
// Аргумент msg может содержать указатель на строку с описанием
// текущей выполняемой операции.
typedef long (KRTAPI *drv2_informUser) (short percentDone, const char *msg);

// функция регистрации записи
// возвращает KRT_OK при успехе, KRT_ERR при ошибке.
// Для каждого прогона вызывается один раз при его регистрации
// (создании trc-файла). Драйвер может использовать эту функцию
// для предварительного расчета каких-либо таблиц и проверки
// правильности файла первичных данных. В ini-файл, задаваемый
// аргументом trcFile, в секцию DRIVER_DATA драйвер может записать
// информацию необходимую ему для открытия прогона.
typedef long (KRTAPI *drv2_Register) (

 // нуль-ограниченная строка, указывающая полный путь к файлу
 // выбранному пользователем как источник первичных данных   
 const char * datFile, 

 // нуль-ограниченная строка, указывающая полный путь к файлу                           
 // определения прогона (trc-файл). В секции DRIVER_DATA этого   
 // файла драйвер может сохранять информацию, необходимую ему для
 // работы с записью при ее открытии функцией krtOpenTrace.      
 const char * trcFile, 
                       
 // нуль-ограниченная строка, указывающая полный путь к каталогу                       
 // где в процессе регистрации данных драйвер должен создавать свои
 // файлы, необходимые ему для работы с записью при ее открытии 
 // функцией krtOpenTrace. Данная строка не содержит завершающего слеша.
 const char * indxPath, 

 // адрес указателя на строку с сообщением о произошедшей ошибке
 char **errText, 

 // указатель на callback функцию. 
 drv2_informUser informUser  

);

// callback функция, вызываемая драйвером при поступлении новых данных.
// возвращает 1 если блок новых данных подключен к записи и 
// 0 если блок новых данных не обработан и и его необходимо повторно указать
// как новые данные при следующем вызове.
// аргумент newData является указателем на структуру, описывающую блок поступивших данных.
typedef long (KRTAPI *drv2_newDataRegistered) (T_ArrivedData *newData);

// функция установки обработчика сообщения о поступлении новых данных
// если NULL, то динамическое оповещение о поступлении данных не поддерживается.
// если обработчик newDataRegistered успешно установлен и будет вызывываться 
// при поступлении новых данных, должен возвращать 1.
// если обработчик не установлен, должен возвращать 0. 
typedef long (KRTAPI *drv2_Online) (

 // дескриптор прогона, для которого устанавливается обработчик
 KRTHANDLE handle, 
 // указатель на callback функцию
 drv2_newDataRegistered newDataRegistered

);

//////////////////////////////////////////
// конец типов данных используемых функций
//////////////////////////////////////////

// структура описания драйвера версии 2 API
typedef struct {

 long apiVer;                // версия API
 PIG_TYPE pigType;           // тип снаряда

 long drvVerMax;             // номер версии драйвера, старший разряд
 long drvVerMin;             // номер версии драйвера, младший разряд
 char drvSign[KRT_TEXT];     // сигнатура драйвера
 char drvName[KRT_TEXT];     // описание драйвера
 char drvCopyRt[KRT_TEXT];   // строка копирайта
 
 // функция регистрации прогона
 // если NULL, то для регистрации прогона данного типа записи должна
 // использоваться внешняя утилита.
 drv2_Register krtDrvRegister;
 // функция установки обработчика сообщения о поступлении новых данных
 drv2_Online krtOnline;

} T_DRVINFO2;

// функция экспортируется только драйверами версии API выше KRT_APIVER
// аргумент apiVer задает версию API. 
// в зависимости от значения этого аргумента аргумент drvInfoStruct является
// указателем на разные структуры. таблица соответствия приведена ниже.
//
// +-----------------------+-----------------------------------+
// ¦ значение apiVer       ¦ тип указателя drvInfoStruct       ¦
// ¦-----------------------¦-----------------------------------¦
// ¦                       ¦                                   ¦
// ¦ KRT_APIVER            ¦ NULL                              ¦
// ¦                       ¦                                   ¦
// ¦ KRT_APIVER2           ¦ * T_DRVINFO2                      ¦
// ¦                       ¦                                   ¦
// +-----------------------+-----------------------------------+
//                         
// возвращает KRT_OK при успехе, KRT_ERR при ошибке.
long EXPORT KRTAPI krtDriverInfoExt (long apiVer, void *drvInfoStruct);

typedef long (KRTAPI *drv2_DriverInfoExt) (long apiVer, void *drvInfoStruct);

#endif