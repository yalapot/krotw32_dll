unit KrotApi;

interface
Const
  KRT_APIVER = 1;         // текущая версия API
  KRT_PALETTE_SIZE = 200;  // размер палитры
// секция данных драйвера в файле описания прогона
  DRIVER_DATA = 'DriverData';
// размер буфера для описания вспомогательного датчика
  EXT_SENS_NAME_LENGTH = 256;

// коды возврата для функций драйвера
  KRT_ERR      =         1;
  KRT_OK       =         0;

// типы дополнительных датчиков
 KRT_SENS_TIMER  =     1;    // таймер
 KRT_SENS_ODO    =     2;    // одометр
 KRT_SENS_ORIENT =     4;    // ориентация
 KRT_SENS_SHAKE  =     8;    // ускорение
 KRT_SENS_PRESS  =    16;    // давление
 KRT_SENS_TEMP   =    32;    // температура
 KRT_SENS_ANGLE  =    64;    // угловых скоростей
 KRT_SENS_VOG    =    128;   // 3 ВОГа + 3 акселерометра
 KRT_SENS_EXT =134217728 ;   // вспомогательный

// типы датчиков развертки
 SENS_TYPE_HOLL   =    1 ;   // Холл
 SENS_TYPE_FERR   =    2 ;   // Феррозонд
 SENS_TYPE_INDK   =    3 ;   // Индукционный

// методы опроса датчиков
 SENS_ASK_TIME    =    1 ;   // по таймеру
 SENS_ASK_DIST    =    2 ;   // по одометру
// дискретность опроса
 DIST_DISCRETE = 10;
 TIME_DISCRETE = 10;

{$Align off}
Type
  TKrtTraceHandle = Integer;  // тип данных дескриптора прогона
  TKrtData = Byte;       // тип данных которым драйвер заполняет буфер развертки

// структура в которой драйвер возвращает показания одного датчика
// через функцию krtDrvGetFirstNode
  PNode = ^TNode;
  TNode = Record
     Val: Integer;      // значение датчика
     Pos: Integer;      // положение на трассе значения предыдущего поля
  End;

// структура в которой драйвер возвращает показания выбранной группы
// дополнительных датчиков через функцию krtDrvGetFirstNodeGroup
  PNodeGroup = ^TNodeGroup;
  TNodeGroup = Record

    TimerVal: Integer;      // значение таймера
    TimerPos: Integer;      // положение на трассе показаний таймера

    OdoVal: Integer;        // значение одометра
    OdoPos: Integer;        // положение на трассе показаний одометра

    OrientVal: Integer;     // значение датчика ориентации
    OrientPos: Integer;     // положение на трассе показаний датчика ориентации

    ShakeVal: Integer;      // значение датчика ускорения
    ShakePos: Integer;      // положение на трассе показаний датчика ускорения

    PressVal: Integer;      // значение датчика давления
    PressPos: Integer;      // положение на трассе показаний датчика давления

    TempVal: Integer;       // значение датчика температуры
    TempPos: Integer;       // положение на трассе показаний датчика температуры    

    AngleVal: Integer;      // значение датчика угловых скоростей
    AnglePos: Integer;      // положение на трассе показаний датчика угловых скоростей

    VOGX: Integer;         // координаты X,Y,Z
    VOGY: Integer;
    VOGZ: Integer;
    AccelX: Single;         // компоненты вектора мгновенной скорости
    AccelY: Single;
    AccelZ: Single;

    VogPos: Integer;
  End;


// структура описания пояса датчиков развертки
  TSensGroup = Record
    Sensnum : Integer; // кол-во датчиков в поясе
    Senstype: Integer; // тип датчиков (SENS_TYPE_*)
    MinValue: Integer; // минимальное значение показаний датчика (единицы АЦП)
    MaxValue: Integer; // максимальное значение показаний датчика (единицы АЦП)
{    AskMetod: Integer; // метод опроса датчиков (SENS_ASK_*)
    StepSize: Integer; // дискретность опроса датчиков (мм/милисек - от метода опроса)}
  End;
// структура описания вспомогательного датчика
 TExtSens = Record
   MinValue: Integer; // минимальное значение показаний датчика (единицы АЦП)
   MaxValue: Integer; // максимальное значение показаний датчика (единицы АЦП)
{   AskMetod: Integer; // метод опроса датчика (SENS_ASK_*)
   StepSize: Integer; // дискретность опроса датчика (мм/милисек - от метода опроса)}
   Name: Array [0..EXT_SENS_NAME_LENGTH] of char; // описание датчика
  End;

// структура описания драйвера
  PDrvInfo = ^TDrvInfo;
  TDrvInfo = Record

    ApiVer: Integer;        // версия API
    SensGroups: Integer;    // кол-во поясов датчиков развертки
    ExtSensors: Integer;    // кол-во вспомогательных датчиков

    AskMetod: Integer; // метод опроса датчиков ( SENS_ASK_* )
    StepSize: Integer; // дискретность опроса датчиков (мм/милисек - от метода опроса)}

    Group: Pointer;     // указатель на массив структур описания поясов
                            // датчиков развертки
                            // размер массива задан полем sensGroups

    ExtSens: Pointer;     // указатель на массив структур описания
                            // вспомогательных датчиков
                            // размер массива задан полем extSensors


                            // VOG функция
    VOG: Integer;           // 1 или 0
 // таймеры (милисекунды прогона)
    TimerNum : Integer;      // количество
    TimerStep: Integer ;     // дискретность измерения (микросек)

 // одометры (милиметры дистанции)
    OdoNum : Integer;        // количество
    OdoStep: Integer;        // дискретность измерения (мм)

 // датчики ориентации (град наклона верх.датчика ПЧС от 0 до 360)
    OrientNum : Integer;     // количество
    OrientStep: Integer;    // дискретность измерения (мм/милисек - от метода опроса)

 // датчики ускорения (единицы АЦП)
    ShakeNum:  Integer;      // количество
    ShakeMin:  Integer;      // минимальное значение показаний датчика (единицы АЦП)

 // датчики давления (МПа???)
    PressNum : Integer;     // количество
    PressStep: Integer;     // дискретность измерения (мм/милисек - от метода опроса)

 // датчики температуры (градусы Цельсия???)
    TempNum : Integer;      // количество
    TempStep: Integer;      // дискретность измерения (мм/милисек - от метода опроса)

 // датчики угловых скоростей (единицы АЦП)
    AngleNum : Integer;      // количество
    AngleMin : Integer;      // минимальное значение показаний датчика (единицы АЦП)

//////////////////////////////////////////////////////////////////////////
//Callback - Функции
//////////////////////////////////////////////////////////////////////////
  krtDrvRegister: Pointer;
 (*int (KRTAPI *krtDrvRegister) (
 // функция регистрации прогона
 // если NULL, то для регистрации прогона данного типа записи должна
 // использоваться внешняя утилита.
 // возвращает KRT_OK при успехе, KRT_ERR при ошибке.
 // Для каждого прогона вызывается один раз при его регистрации
 // (создании inf-файла). Драйвер может использовать эту функцию
 // для предварительного расчета каких-либо таблиц и проверки
 // правильности файла первичных данных. В ini-файл, задаваемый
 // аргументом infFile, в секцию DRIVER_DATA драйвер должен записать
 // информацию необходимую ему для открытия прогона.

  LPSTR infFile  // нуль-ограниченная строка, указывающая полный путь к файлу
                 // определения прогона (inf-файл)
 );*)

  krtDrvError: Pointer;
(* const char *(KRTAPI *krtDrvError) (void);
 // функция описания ошибок возникающих при работе с прогоном
 // если Null, расширенное описание ошибок драйвером не поддерживается.
 // возвращает указатель на нуль-ограниченную строку, описывающую причины
 // последней неудачной операции драйвера.
 // Т.к. большинство экспортируемых функций драйвера возврашают
 // только состояние успеха/неудачи, при возврате какой-либо
 // функцией драйвера значения KRT_ERR, данная функция позволяет
 // программе запросить у драйвера подробное описание последней ошибки.*)

  krtDrvGetFirstNode: Pointer;
 (*
 int (KRTAPI *krtDrvGetFirstNode) (
 // функция чтения показаний дополнительных датчиков поодиночке.
 // Если данное поле устанавливается в NULL, то поле krtDrvGetNextNode
 // также должно быть установлено в NULL и детальная информация о
 // дополнительных датчиках не поддерживается.
 // возвращает KRT_OK при успехе, KRT_ERR при ошибке.
 // находит первые показания запрошенного датчика, находящийся перед или на
 // позиции, заданной аргументом start и заполняет этими показаниями
 // структуру T_NODE
 // Если запрашиваемый датчик отмечен как несуществующий при вызове функции
 // krtDriverInfo, то функция должна вернуть KRT_ERR.

  KRTHANDLE handle,      // дескриптор прогона

  T_NODE *node,          // указатель на структуру T_NODE, которую необходимо 
                         // заполнить информацией о показаниях датчика

  long start,            // позиция на трассе, на которой запрашиваются 
                         // показания датчика. Драйвер должен вернуть показания
                         // которые сняты на запрашиваемой позиции или перед ней.
                         // Если в записи до запрашиваемой позиции нет показаний
                         // структура T_NODE должна быть заполнена нулями.

  long sensType,         // указывает, показания какого из датчиков запрашиваются
                         // данный аргумент может принимать значения одной из
                         // констант KRT_SENS_*

  long sensIndex,        // уточняет значение предыдущего аргумента. Каждый
                         // дополнительный датчик может быть несколько раз
                         // дублирован. Если данный аргумент имеет значение -1L,
                         // то драйвер должен вернуть показания базового датчика.
                         // Однако при помощи этой функции программа просмотра
                         // может запросить показания дублирующих датчиков, если
                         // в этом аргументе передано неотрицательное число. В
                         // этом случае аргумент интерпретируется как индекс
                         // датчика в соответствующем массиве датчиков и драйвер
                         // должен вернуть показания именно этого датчика.
                         // если значение аргумента sensType равно KRT_SENS_EXT
                         // то данный аргумент является индексом в массиве 
                         // вспомогательных датчиков.
                         // при значении индекса, несоответствующего ни одному
                         // датчику из массива датчиков драйвер должен вернуть
                         // KRT_ERR.
                         // Например, при вызове функции krtDriverInfo была 
                         // передана следующая информация о конфигурации драйвера:
                         //    датчиков ориентации        - 3
                         //    вспомогательных датчиков   - 2
                         // При вызове функции krtDrvGetFirstNode со следующими
                         // аргументами драйвер должен выполнить следующие 
                         // действия:
                         //
                         //   sensType = KRT_SENS_ORIENT
                         //   sensIndex = -1L
                         // заполнить структуру T_NODE базовыми показаниями 
                         // датчика ориентации на запрошенной позиции
                         //
                         //   sensType = KRT_SENS_ORIENT
                         //   sensIndex = 2
                         // заполнить структуру T_NODE показаниями 
                         // третьего датчика ориентации (первый датчик
                         // имеет индекс 0) на запрошенной позиции
                         //
                         //   sensType = KRT_SENS_ORIENT
                         //   sensIndex = 4
                         // вернуть KRT_ERR
                         // (пятого датчика ориентации не существует)
                         //
                         //   sensType = KRT_SENS_EXT
                         //   sensIndex = 1
                         // заполнить структуру T_NODE показаниями 
                         // второго вспомогательного датчика
                         //
                         //   sensType = KRT_SENS_EXT
                         //   sensIndex = -1L
                         // вернуть KRT_ERR 
                         // (неверный индекс в массиве вспомогательных датчиков)

  long length,           // длина участка который будет запрашиваться последующими
                         // вызовами GetNextNode*
                         // этот параметр передается для справки, чтобы драйвер
                         // мог минимизировать кол-во запросов, основываясь на
                         // текущем масштабе изображения в контроле, где эти
                         // данные будут отображаться.

  long controlSize       // размер контрола, где будут отрисовываться данные
                         // в пикселах.
                         // основываясь на этом параметр, драйвер может пропустить
                         // некоторые узлы из графика показаний датчика, т.к.
                         // они все равно не будут отрисованы в данном масштабе.
                         // этим достигается сокращение кол-ва вызовов GetNextNode*

 );*)


  krtDrvGetNextNode: Pointer;
 (*
 int (KRTAPI *krtDrvGetNextNode) (
 // функция чтения показаний дополнительных датчиков поодиночке.
 // возвращает KRT_OK при успехе, KRT_ERR при ошибке.
 // данная функция используется в паре с функцией krtDrvGetFirstNode
 // она заполняет структуру T_NODE показаниями датчика указанного в вызове
 // функции krtDrvGetFirstNode. Считываемые показания датчика должны находится
 // в записи прогона следом за показаниями этого датчика, которые были
 // возвращены функцией krtDrvGetFirstNode или предыдущими вызовами функции
 // krtDrvGetNextNode.
 // Целостность цепочки показаний датчика, считываемых цепочкой вызовов
 // krtDrvGetNextNode должна быть обеспечена драйвером в пределах прогона
 // адресуемого дескриптором прогона. Для разных дескрипторов прогона цепочки
 // вызовов krtDrvGetNextNode должны быть независимы.
 // При достижении цепочкой вызовов krtDrvGetNextNode конца трассы функция
 // должна записывать в поле Val структуры T_NODE значение 0, а в поле Pos
 // конечную дистанцию трассы.

  KRTHANDLE handle,      // дескриптор прогона

  T_NODE *node           // указатель на структуру T_NODE, которую необходимо
                         // заполнить информацией о показаниях датчика
 );*)
  krtDrvGetFirstNodeGroup: Pointer;
(* int (KRTAPI *krtDrvGetFirstNodeGroup) (
 // функция группового чтения показаний дополнительных датчиков.
 // Если данное поле устанавливается в NULL, то поле krtDrvGetNextNodeGroup
 // также должно быть установлено в NULL и информация о дополнительных
 // датчиках не поддерживается драйвером.
 // возвращает KRT_OK при успехе, KRT_ERR при ошибке.
 // находит первые показания датчиков, входящих в запрошенную группу,
 // находящихся перед или на позиции, заданной аргументом start и заполняет
 // этими показаниями структуру T_NODEGROUP
 // Возможности данной функции полностью перекрываются возможностями
 // функции krtDrvGetFirstNode, с помощью которой можно извлечь более полную
 // информацию о показаниях дополнительных датчиков. Функция krtDrvGetFirstNodeGroup
 // используется для сокращения накладных расходов на множественные вызовы
 // функции krtDrvGetFirstNode при автоматическом скроллинге прогона.

  KRTHANDLE handle,      // дескриптор прогона

  T_NODEGROUP *node,     // указатель на структуру T_NODEGROUP, которую
                         // необходимо заполнить информацией о показаниях
                         // датчиков, входящих в запрошенную группу.

  long start,            // позиция на трассе, на которой запрашиваются
                         // показания датчиков. Драйвер должен вернуть показания
                         // которые сняты на запрашиваемой позиции или перед ней.
                         // Если в записи до запрашиваемой позиции нет показаний
                         // поля датчика не имеющего показаний на данную отметку
                         // в структуре T_NODEGROUP должны быть заполнены нулями.

  long sensGroup         // задает группу датчиков, базовыми показаниями которых
                         // необходимо заполнять соответствующие поля структуры
                         // T_NODEGROUP.
                         // группа задается битовой маской, полученной битовой
                         // операцией OR (ИЛИ) констант KRT_SENS_*
                         // Например, аргумент sensGroup имеет значение
                         // (KRT_SENS_ORIENT || KRT_SENS_SHAKE).
                         // Драйвер должен заполнить поля
                         // orientVal, orientPos, shakeVal, shakePos структуры
                         // T_NODEGROUP и оставить другие поля без изменений.
 );*)
   krtDrvGetNextNodeGroup: Pointer;
(* int (KRTAPI *krtDrvGetNextNodeGroup) (
 // функция группового чтения показаний дополнительных датчиков.
 // возвращает KRT_OK при успехе, KRT_ERR при ошибке.
 // данная функция используется в паре с функцией krtDrvGetFirstNodeGroup
 // она заполняет структуру T_NODEGROUP показаниями датчиков, входящих в
 // группу, указанную в вызове функции krtDrvGetFirstNode.
 // Считываемые показания датчиков должны находится в записи прогона следом
 // друг за другом для каждого датчика, входящего в группу.
 // Если в результате цепочки вызовов функций krtDrvGetFirstNodeGroup /
 // krtDrvGetNextNodeGroup для одного из датчиков достигнут конец трассы
 // в соответствующее поле значения этого датчика в структуры T_NODEGROUP
 // должен  записываться 0, а в поле положения этого датчика на трассе
 // конечная дистанция трассы.
 // Целостность цепочки показаний датчиков, считываемых цепочкой вызовов
 // krtDrvGetNextNodeGroup должна быть обеспечена драйвером в пределах прогона
 // адресуемого дескриптором прогона. Для разных дескрипторов прогона цепочки
 // вызовов krtDrvGetNextNodeGroup должны быть независимы.

  KRTHANDLE handle,      // дескриптор прогона

  T_NODEGROUP *node      // указатель на структуру T_NODE, которую необходимо
                         // заполнить информацией о показаниях датчика
 );*)
  krtDrvFillData: Pointer;
(* int (KRTAPI *krtDrvFillData) (
 // функция чтения показаний датчиков развертки.
 // если NULL, информация о развертке не поддерживается.
 // возвращает KRT_OK при успехе, KRT_ERR при ошибке.

  KRTHANDLE handle,      // дескриптор прогона

  int group,             // индекс пояса датчиков развертки, из которого надо
                         // считать данные.

  long start,            // начальная позиция считываемого фрагмента развертки
                         // на трассе. (мм/милисек - от метода опроса)

  long length,           // длина считываемого участка развертки
                         // (мм/милисек - от метода опроса)

  KRTDATA *screen        // указатель на массив, который необходимо заполнить
                         // информацией о датчиках развертки.
                         // Элемент массива число типа BYTE, которое может
                         // принимать значение от 0 до KRT_PALLETE_SIZE - 1
                         // драйвер должен транслировать показания датчиков
                         // снаряда в указанный диапазон согласно своей
                         // внутренней логике и настройкам бортовой
                         // измерительной аппаратуры имея в в виду, что
                         // итоговый результат должен отражать интенсивность
                         // изменения магнитного поля, измеренное датчиком.
                         // Фактически это означает, что при сжатии данных
                         // развертки в программе просмотра из группы показаний
                         // датчиков, сжимаемых в один пиксел экрана выбирается
                         // наибольшее показание. При таком алгоритме сжатия
                         // не должно происходить потерь значимой информации.
                         // Количество строк массива равно значению
                         // поля num структуры T_SENSGROUP, описывающей
                         // соответствующий пояс датчиков развертки
                         // Количество столбцов массива равно длине участка
                         // развертки (аргумент length) деленному на значение
                         // поля stepSize структуры T_SENSGROUP
                         // Строки развертки должны заполняться драйвером с
                         // учетом физического поворота снаряда на данном участке
 );*)

 End;

// структура описания прогона, открытого для работы.
  PTraceInfo = ^TTraceInfo;
  TTraceInfo = Record
    Length  : Integer;          // длина трассы в мм
    Time    : Integer;          // продолжительность прогона в секундах

    SpeedMin: Integer;          // минимальная  скорость снаряда на трассе в см/сек
    SpeedMax: Integer;          // максимальная скорость снаряда на трассе в см/сек

    ShakeMin: Integer;          // минимальное  значение датчика ускорения
    ShakeMax: Integer;          // максимальное значение датчика ускорения

    PressMin: Integer;          // минимальное  значение датчика давления
    PressMax: Integer;          // максимальное значение датчика давления

    TempMin : Integer;          // минимальное  значение датчика температуры
    TempMax : Integer;          // максимальное значение датчика температуры

    AngleMin: Integer;          // минимальное  значение датчика угловых скоростей
    AngleMax: Integer;          // максимальное значение датчика угловых скоростей
  End;

{$Align on}
implementation
end.
