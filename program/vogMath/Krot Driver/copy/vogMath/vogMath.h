#include "krtBase.h"

#define TURN_GOR   0          // поворот в азимутальной плокости
#define TURN_VER   1          // поворот в нормальной (вертикальной) плокости
#define TURN_3D    8          // комплексный 3D поворот
#define TURN_START 2          // поправка на длину снаряда в начале поворота
#define TURN_END   4          // поправка на длину снаряда в конце поворота

#define MATCH_MODE_SHIFT 1    // преобразование сдвига
#define MATCH_MODE_SCALE 2    // преобразование растяжения/сжатия
#define MATCH_MODE_ROTATE 4   // преобразование поворота

typedef struct {

 long  radius;                // радиус кривизны в мм.
 float angle;                 // угол поворота в радианах

} T_TURNDATA;

//////////////////////////////////////////////////////////////////////////
// Экспортируемые функции
//////////////////////////////////////////////////////////////////////////

// функция заполняет структуру T_CURVEDATA
// данными о параметрах поворота,
// возвращает KRT_OK при успехе, KRT_ERR при ошибке.
long EXPORT KRTAPI GetCurveData (

   KRTHANDLE    handle,     // хэндл открытого прогона

   long         turnkind,   // битовая маска
                            // бит 0
                            // сбошен - поворот в плоскости горизонта
                            // установлен - поворот в вертикальной плоскости
                            // бит 1
                            // установлен - необходима поправка на длину снаряда в начале поворота
                            // бит 2
                            // установлен - необходима поправка на длину снаряда в конце поворота
                            // бит 3
                            // установлен - считать 3D поворот не обращая внимание на бит 0

   long      start,         // начало поворота

   long      length,        // длина поворота

   T_TURNDATA  *turninf    // указатель на структуру T_TURNDATA, которую
                           // необходимо заполнить данными о параметрах поворота
);

// Функция инициализирует процедуру совмещения участков двух прогонов,
// задаваемых дескрипторами прогонов, началом и концом участков.
// В зависимомости от маски matchMode, находятся те или иные параметры
// необходимого преобразования координат для совмещения участков.
// В дальнейшем с помощью вызова функции GetNextMatching основная программа
// получает текущие координаты ведомого прогона с учетом необходимых преобразований
long EXPORT KRTAPI InitMatching (

   KRTHANDLE handleMaster, // хэндл ведущего прогона
   long startMaster,       // начало участка совмещения на ведущей записи
   long lengthMaster,      // длина участка совмещения на ведущей записи
   KRTHANDLE handleSlave,  // хэндл ведомого прогона
   long startSlave,        // начало участка совмещения на ведомой записи
   long lengthSlave,       // длина участка совмещения на ведомой записи
   long controlSize,       // размер контрола для отображения результатов
                           // совмещения в экранных пикселах
   long matchMode          // битовая маска, задающая режим совмещения записей
                           // набор из констант MATCH_MODE_*
);

// Функция запоняет поля vogx, vogy, vogz структуры T_NODEGROUP
// координатами текущей точки пути ведомого прогона с учетом необходимых афинных
// преобразований.
// Поля vogext1, vogext2, vogext3 соответствующей структуры
// заполняются нулями (не нужны в данном контексте)
long EXPORT KRTAPI GetNextMatching (

   T_NODEGROUP *node       // указатель на структуру которую нужно заполнить
                           // преобразованными координатами прогона заданного
                           // дескриптором handleSlave при вызове InitMatching
);

// Функция заполняет строку outString описанием последней ошибки произошедшей
// при работе с записями прогонов. Возвращает длину строки сообщения об ошибке.
long EXPORT KRTAPI krotError (char * outString);

// Функция ищет в каталоге, где расположен primFile файлы первичных навигационных данных.
// если находит, то создает индексные файлы навигационных данных в каталоге indxFolder.
// после этого записывает пути на созданные файлы в trc-файл trcFile,
// в места, определенные в файле vogTrc.h
// в процессе работы вызывает функцию informUser, оповещая пользователя о ходе работы.
long EXPORT KRTAPI krotCreateVogIndex (
 const char * primFile, 
 const char * indxFolder,           
 const char * trcFile, 
 long (KRTAPI *informUser) (short percentDone, const char *msg)
);

// Функция заполняет строку outString описанием последней ошибки произошедшей
// при работе с записями прогонов. Возвращает длину строки сообщения об ошибке.
long EXPORT KRTAPI vogError (char * outString);
