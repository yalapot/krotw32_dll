#ifndef _KRTBASE_H_
#define _KRTBASE_H_

#include "compiler.h"

// krtbase.h (C) Vitaly Bogomolov 2000-2006
// Базовые определения для драйверов всех версий API,
// взаимодйествующих с программой просмотра krotW32

#define KRTAPI _stdcall       // соглашение о вызове для функций драйвера
#define KRTHANDLE long        // тип данных дескриптора прогона
#define KRTROW long           // тип сырых данных развертки

#define DRIVER_DATA           "DriverData"  // секция данных драйвера в файле описания прогона
#define KRT_TEXT              1024          // размер буфера для строки описания чего-либо
#define EXT_SENS_NAME_LENGTH  KRT_TEXT      // размер буфера для описания вспомогательного датчика
#define ORNT_MAX_VAL          36000L        // размер полной окружности в сотых долях градуса

// коды возврата для функций драйвера
#define KRT_ERR               1
#define KRT_OK                0

// типы дополнительных датчиков
#define KRT_SENS_TIMER        1    // таймер
#define KRT_SENS_ODO          2    // одометр
#define KRT_SENS_ORIENT       4    // ориентация
#define KRT_SENS_SHAKE        8    // ускорение
#define KRT_SENS_PRESS       16    // давление
#define KRT_SENS_TEMP        32    // температура
#define KRT_SENS_ANGLE       64    // угловых скоростей
#define KRT_SENS_VOG        128    // VOG
#define KRT_SENS_THICK      256    // толщина стенки
#define KRT_SENS_EXT  134217728    // вспомогательный

// типы датчиков развертки
#define SENS_TYPE_HOLL        1    // Основной пояс Холл
#define SENS_TYPE_FERR        2    // Феррозонд
#define SENS_TYPE_INDK        3    // Индукционный
#define SENS_RESIDUAL         4    // Остаточная намагниченность
#define SENS_PROFIL           5    // Профильные датчики

// методы опроса датчиков   
#define SENS_ASK_TIME         1    // по таймеру
#define SENS_ASK_DIST         2    // по одометру

// структура в которой драйвер возвращает показания одного датчика
// через функцию krtDrvGetFirstNode
typedef struct {      
 long Val;      // значение датчика должно выдаваться в тех же единицах, 
                // что и в струкруре T_NODEGROUP (см. ниже)
 long Pos;      // положение на трассе значения предыдущего поля 
                // в милиметрах/милисикундах
                // в зависимости от режима опроса датчиков, принятого
                // для данногоснаряда
} T_NODE;

// структура в которой драйвер возвращает показания выбранной группы 
// дополнительных датчиков через функцию krtDrvGetFirstNodeGroup
typedef struct {      

 long timerVal;      // значение таймера (миллисекунды)
 long timerPos;      // положение на трассе показаний таймера

 long odoVal;        // значение одометра (милиметры)
 long odoPos;        // положение на трассе показаний одометра

 long orientVal;     // значение датчика ориентации (номер верхнего физического датчика)
 long orientPos;     // положение на трассе показаний датчика ориентации
 // используется следующее соглашение о нумерации датчиков:
 // верхний физический датчик снаряда имеет номер "0". Нумерация датчиков идет от него в
 // возрастающем порядке по часовой стрелке, если смотреть на снаряд сзади (по ходу движения газа)

 long shakeVal;      // значение датчика ускорения
 long shakePos;      // положение на трассе показаний датчика ускорения

 long pressVal;      // значение датчика давления
 long pressPos;      // положение на трассе показаний датчика давления

 long tempVal;       // значение датчика температуры (градусы цельсия)
 long tempPos;       // положение на трассе показаний датчика температуры

 long angleVal;      // значение датчика угловых скоростей
 long anglePos;      // положение на трассе показаний датчика угловых скоростей

 long thickVal;      // значение канала толщины стенки трубы
 long thickPos;      // положение на трассе показаний канала толщины стенки трубы

 long vogx;          // датчики VOG
 long vogy;
 long vogz;
 float vogext1;
 float vogext2;
 float vogext3;
 long vogPos;        // положение на трассе данных показаний датчиков VOG

} T_NODEGROUP;

// тип данных функции регистрации
// возвращает KRT_OK при успехе, KRT_ERR при ошибке.
// Для каждого прогона вызывается один раз при его регистрации
// (создании trc-файла). Драйвер может использовать эту функцию
// для предварительного расчета каких-либо таблиц и проверки
// правильности файла первичных данных. В ini-файл, задаваемый
// аргументом trcFile, в секцию DRIVER_DATA драйвер может записать
// информацию необходимую ему для открытия прогона.
typedef long (KRTAPI *drv_Register) (

  const char * datFile,  // нуль-ограниченная строка, указывающая полный путь к файлу
                         // выбранному пользователем как источник первичных данных

  const char * trcFile,  // нуль-ограниченная строка, указывающая полный путь к файлу
                         // определения прогона (trc-файл). В секции DRIVER_DATA этого
                         // файла драйвер может сохранять информацию, необходимую ему для
                         // работы с записью при ее открытии функцией krtOpenTrace.

  char **errText, // адрес указателя на строку с сообщением о произошедшей ошибке


  // указатель на callback функцию. Возвращает 0 если работу можно
  // продолжать и 1 если пользователь запросил отмену регистрации
  // Аргумент percentDone должен содержать число от 0 до 100 для
  // информирования пользователя о текущем обьеме выполнения работы.
  long (KRTAPI *informUser) (short percentDone)

);

// структура описания драйвера
typedef struct {

 // версия API
 long apiVer;    

 // функция регистрации прогона
 // если NULL, то для регистрации прогона данного типа записи должна
 // использоваться внешняя утилита.
 drv_Register krtDrvRegister;

} T_DRVINFO;


//////////////////////////////////////////////////////////////////////////
// Описание типов данных указателей на функции драйвера
//////////////////////////////////////////////////////////////////////////

// функция описания ошибок возникающих при работе с прогоном
// если NULL, расширенное описание ошибок драйвером не поддерживается.
// возвращает указатель на нуль-ограниченную строку, описывающую причины
// последней неудачной операции драйвера.
// Т.к. большинство экспортируемых функций драйвера возврашают
// только состояние успеха/неудачи, при возврате какой-либо
// функцией драйвера значения KRT_ERR, данная функция позволяет
// программе запросить у драйвера подробное описание последней ошибки.
typedef const char *(KRTAPI *drvErrorFunc) (void);

// функция чтения показаний дополнительных датчиков поодиночке.
// Если данное поле устанавливается в NULL, то поле krtDrvGetNextNode
// также должно быть установлено в NULL и детальная информация о
// дополнительных датчиках не поддерживается.
// возвращает KRT_OK при успехе, KRT_ERR при ошибке.
// находит первые показания запрошенного датчика, находящийся перед или на
// позиции, заданной аргументом start и заполняет этими показаниями
// структуру T_NODE
// Если запрашиваемый датчик отмечен как несуществующий при вызове функции
// krtOpenTrace, то функция должна вернуть KRT_ERR.
typedef long (KRTAPI *drvGetFirstNode) (

  KRTHANDLE handle,      // дескриптор прогона

  T_NODE *node,          // указатель на структуру T_NODE, которую необходимо 
                         // заполнить информацией о показаниях датчика

  long start,            // позиция на трассе, на которой запрашиваются 
                         // показания датчика. Драйвер должен вернуть показания
                         // которые сняты на запрашиваемой позиции или перед ней.
                         // Если в записи до запрашиваемой позиции нет показаний
                         // структура T_NODE должна быть заполнена нулями.
                         // позиция задается в милиметрах/милисикундах
                         // в зависимости от режима опроса датчиков, принятого
                         // для данногоснаряда

  long sensType,         // указывает, показания какого из датчиков запрашиваются
                         // данный аргумент может принимать значения одной из
                         // констант KRT_SENS_*

  long sensIndex,        // уточняет значение предыдущего аргумента. Каждый 
                         // дополнительный датчик может быть несколько раз
                         // дублирован. Если данный аргумент имеет значение -1L, 
                         // то драйвер должен вернуть показания базового датчика.
                         // Однако при помощи этой функции программа просмотра
                         // может запросить показания дублирующих датчиков, если
                         // в этом аргументе передано неотрицательное число. В
                         // этом случае аргумент интерпретируется как индекс
                         // датчика в соответствующем массиве датчиков и драйвер
                         // должен вернуть показания именно этого датчика.
                         // если значение аргумента sensType равно KRT_SENS_EXT
                         // то данный аргумент является индексом в массиве 
                         // вспомогательных датчиков.
                         // при значении индекса, несоответствующего ни одному
                         // датчику из массива датчиков драйвер должен вернуть
                         // KRT_ERR.
                         // Например, при вызове функции krtDriverInfo была 
                         // передана следующая информация о конфигурации драйвера:
                         //    датчиков ориентации        - 3
                         //    вспомогательных датчиков   - 2
                         // При вызове функции krtDrvGetFirstNode со следующими
                         // аргументами драйвер должен выполнить следующие 
                         // действия:
                         //
                         //   sensType = KRT_SENS_ORIENT
                         //   sensIndex = -1L
                         // заполнить структуру T_NODE базовыми показаниями 
                         // датчика ориентации на запрошенной позиции
                         //
                         //   sensType = KRT_SENS_ORIENT
                         //   sensIndex = 2
                         // заполнить структуру T_NODE показаниями 
                         // третьего датчика ориентации (первый датчик 
                         // имеет индекс 0) на запрошенной позиции
                         //
                         //   sensType = KRT_SENS_ORIENT
                         //   sensIndex = 4
                         // вернуть KRT_ERR 
                         // (пятого датчика ориентации не существует)
                         //
                         //   sensType = KRT_SENS_EXT
                         //   sensIndex = 1
                         // заполнить структуру T_NODE показаниями 
                         // второго вспомогательного датчика
                         //
                         //   sensType = KRT_SENS_EXT
                         //   sensIndex = -1L
                         // вернуть KRT_ERR 
                         // (неверный индекс в массиве вспомогательных датчиков)

  long length,           // длина участка который будет запрашиваться последующими
                         // вызовами GetNextNode*
                         // этот параметр передается для справки, чтобы драйвер
                         // мог минимизировать кол-во запросов, основываясь на
                         // текущем масштабе изображения в контроле, где эти
                         // данные будут отображаться.
                         // задается в милиметрах/милисикундах
                         // в зависимости от режима опроса датчиков, принятого
                         // для данногоснаряда

  long controlSize       // размер контрола, где будут отрисовываться данные
                         // в пикселах.
                         // основываясь на этом параметре, драйвер может пропустить
                         // некоторые узлы из графика показаний датчика, т.к.
                         // они все равно не будут отрисованы в данном масштабе.
                         // этим достигается сокращение кол-ва вызовов GetNextNode*
                         // если -1, то драйвер должен выводить все имеющиеся узлы без прореживания
                  
);

// функция чтения показаний дополнительных датчиков поодиночке.
// возвращает KRT_OK при успехе, KRT_ERR при ошибке.
// данная функция используется в паре с функцией krtDrvGetFirstNode
// она заполняет структуру T_NODE показаниями датчика указанного в вызове
// функции krtDrvGetFirstNode. Считываемые показания датчика должны находится
// в записи прогона следом за показаниями этого датчика, которые были
// возвращены функцией krtDrvGetFirstNode или предыдущими вызовами функции
// krtDrvGetNextNode.
// Целостность цепочки показаний датчика, считываемых цепочкой вызовов 
// krtDrvGetNextNode должна быть обеспечена драйвером в пределах прогона
// адресуемого дескриптором прогона. Для разных дескрипторов прогона цепочки
// вызовов krtDrvGetNextNode должны быть независимы.
// При достижении цепочкой вызовов krtDrvGetNextNode конца трассы функция 
// должна записывать в поле Val структуры T_NODE значение 0, а в поле Pos 
// конечную дистанцию трассы.
typedef long (KRTAPI *drvGetNextNode) (

  KRTHANDLE handle,      // дескриптор прогона

  T_NODE *node           // указатель на структуру T_NODE, которую необходимо 
                         // заполнить информацией о показаниях датчика
);

// функция группового чтения показаний дополнительных датчиков.
// Если данное поле устанавливается в NULL, то поле krtDrvGetNextNodeGroup
// также должно быть установлено в NULL и информация о дополнительных 
// датчиках не поддерживается драйвером.
// возвращает KRT_OK при успехе, KRT_ERR при ошибке.
// находит первые показания датчиков, входящих в запрошенную группу, 
// находящихся перед или на позиции, заданной аргументом start и заполняет 
// этими показаниями структуру T_NODEGROUP
// Возможности данной функции полностью перекрываются возможностями 
// функции krtDrvGetFirstNode, с помощью которой можно извлечь более полную
// информацию о показаниях дополнительных датчиков. Функция krtDrvGetFirstNodeGroup
// используется для сокращения накладных расходов на множественные вызовы
// функции krtDrvGetFirstNode при автоматическом скроллинге прогона.
typedef long (KRTAPI *drvGetFirstNodeGroup) (

  KRTHANDLE handle,      // дескриптор прогона

  T_NODEGROUP *node,     // указатель на структуру T_NODEGROUP, которую 
                         // необходимо заполнить информацией о показаниях 
                         // датчиков, входящих в запрошенную группу.

  long start,            // позиция на трассе, на которой запрашиваются 
                         // показания датчиков. Драйвер должен вернуть показания
                         // которые сняты на запрашиваемой позиции или перед ней.
                         // Если в записи до запрашиваемой позиции нет показаний
                         // поля датчика не имеющего показаний на данную отметку
                         // в структуре T_NODEGROUP должны быть заполнены нулями.
                         // позиция задается в милиметрах/милисикундах
                         // в зависимости от режима опроса датчиков, принятого
                         // для данногоснаряда

  long sensGroup,        // задает группу датчиков, базовыми показаниями которых 
                         // необходимо заполнять соответствующие поля структуры 
                         // T_NODEGROUP.
                         // группа задается битовой маской, полученной битовой
                         // операцией OR (ИЛИ) констант KRT_SENS_*
                         // Например, аргумент sensGroup имеет значение
                         // (KRT_SENS_ORIENT || KRT_SENS_SHAKE).
                         // Драйвер должен заполнить поля
                         // orientVal, orientPos, shakeVal, shakePos структуры
                         // T_NODEGROUP и оставить другие поля без изменений.

  long length,           // длина участка который будет запрашиваться последующими
                         // вызовами GetNextNode*
                         // этот параметр передается для справки, чтобы драйвер
                         // мог минимизировать кол-во запросов, основываясь на
                         // текущем масштабе изображения в контроле, где эти
                         // данные будут отображаться.
                         // задается в милиметрах/милисикундах
                         // в зависимости от режима опроса датчиков, принятого
                         // для данногоснаряда

  long controlSize       // размер контрола, где будут отрисовываться данные
                         // в пикселах.
                         // основываясь на этом параметр, драйвер может пропустить
                         // некоторые узлы из графика показаний датчика, т.к.
                         // они все равно не будут отрисованы в данном масштабе.
                         // этим достигается сокращение кол-ва вызовов GetNextNode*
);

// функция группового чтения показаний дополнительных датчиков.
// возвращает KRT_OK при успехе, KRT_ERR при ошибке.
// данная функция используется в паре с функцией krtDrvGetFirstNodeGroup
// она заполняет структуру T_NODEGROUP показаниями датчиков, входящих в
// группу, указанную в вызове функции krtDrvGetFirstNode. 
// Считываемые показания датчиков должны находится в записи прогона следом 
// друг за другом для каждого датчика, входящего в группу.
// Если в результате цепочки вызовов функций krtDrvGetFirstNodeGroup / 
// krtDrvGetNextNodeGroup для одного из датчиков достигнут конец трассы
// в соответствующее поле значения этого датчика в структуры T_NODEGROUP 
// должен  записываться 0, а в поле положения этого датчика на трассе
// конечная дистанция трассы.
// Целостность цепочки показаний датчиков, считываемых цепочкой вызовов 
// krtDrvGetNextNodeGroup должна быть обеспечена драйвером в пределах прогона
// адресуемого дескриптором прогона. Для разных дескрипторов прогона цепочки
// вызовов krtDrvGetNextNodeGroup должны быть независимы.
typedef long (KRTAPI *drvGetNextNodeGroup) (

  KRTHANDLE handle,      // дескриптор прогона

  T_NODEGROUP *node      // указатель на структуру T_NODE, которую необходимо 
                         // заполнить информацией о показаниях датчика
);

// функция заполняет информацией о драйвере структуру T_DRVINFO
// Возвращает KRT_OK при успехе, KRT_ERR при ошибке.
// В поле apiVer должна быть записана константа KRT_APIVER. Данное поле
// используется для обеспечения обратной совместимости драйверов. Если в 
// будущем появяться снаряды, которые потребуют принципиально другой структуры
// взаимодействия с ними, то для этой новой версии API после первого вызова
// krtDriverInfo программа просмотра сможет использовать другой порядок 
// загрузки и взаимодействия с драйвером, а для старых драйверов (с нынешней
// версией API) использовать механизмы, описанные в данном файле.
// Это позволит использовать старые драйвера в новой версии программы просмотра
// без переделок.

// В поле krtDrvRegister должен быть записан указатель на функцию регистрации
// записи или NULL, если у драйвера нет встроенной функции регистрации.
typedef long (KRTAPI *drv_DriverInfo) (

 T_DRVINFO *drv          // указатель на структуру информации о драйвере

);

//////////////////////////////////////////////////////////////////////////
// Функции экспортируемые драйвером

long EXPORT KRTAPI krtDriverInfo (
 T_DRVINFO *drv          // указатель на структуру информации о драйвере
);

#endif
