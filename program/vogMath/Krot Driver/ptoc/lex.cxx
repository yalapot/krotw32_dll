
#line 3 "lex.yy.c"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,int len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef yyconst struct yy_trans_info *yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 61
#define YY_END_OF_BUFFER 62
struct yy_trans_info
	{
	flex_int16_t yy_verify;
	flex_int16_t yy_nxt;
	};
static yyconst struct yy_trans_info yy_transition[7241] =
    {
 {   0,   0 }, {   0,6985 }, {   0,   0 }, {   0,6983 }, {   1,1548 },
 {   2,1548 }, {   3,1548 }, {   4,1548 }, {   5,1548 }, {   6,1548 },
 {   7,1548 }, {   8,1548 }, {   9,1550 }, {  10,1552 }, {  11,1548 },
 {  12,1550 }, {  13,1548 }, {  14,1548 }, {  15,1548 }, {  16,1548 },
 {  17,1548 }, {  18,1548 }, {  19,1548 }, {  20,1548 }, {  21,1548 },
 {  22,1548 }, {  23,1548 }, {  24,1548 }, {  25,1548 }, {  26,1548 },
 {  27,1548 }, {  28,1548 }, {  29,1548 }, {  30,1548 }, {  31,1548 },
 {  32,1550 }, {  33,1548 }, {  34,1548 }, {  35,1554 }, {  36,1565 },
 {  37,1657 }, {  38,1689 }, {  39,1764 }, {  40,1691 }, {  41,1693 },
 {  42,1695 }, {  43,1697 }, {  44,1699 }, {  45,2022 }, {  46,2024 },

 {  47,2026 }, {  48,2040 }, {  49,2099 }, {  50,2158 }, {  51,2158 },
 {  52,2158 }, {  53,2158 }, {  54,2158 }, {  55,2158 }, {  56,2158 },
 {  57,2158 }, {  58,2042 }, {  59,2044 }, {  60,2053 }, {  61,2055 },
 {  62,2057 }, {  63,1548 }, {  64,2059 }, {  65,1565 }, {  66,1565 },
 {  67,1565 }, {  68,1565 }, {  69,1565 }, {  70,1565 }, {  71,1565 },
 {  72,1565 }, {  73,1565 }, {  74,1565 }, {  75,1565 }, {  76,1565 },
 {  77,1565 }, {  78,1565 }, {  79,1565 }, {  80,1565 }, {  81,1565 },
 {  82,1565 }, {  83,1565 }, {  84,1565 }, {  85,2217 }, {  86,1565 },
 {  87,1565 }, {  88,1565 }, {  89,1565 }, {  90,1565 }, {  91,2061 },
 {  92,1548 }, {  93,2063 }, {  94,2067 }, {  95,1565 }, {  96,1548 },

 {  97,1565 }, {  98,1565 }, {  99,1565 }, { 100,1565 }, { 101,1565 },
 { 102,1565 }, { 103,1565 }, { 104,1565 }, { 105,1565 }, { 106,1565 },
 { 107,1565 }, { 108,1565 }, { 109,1565 }, { 110,1565 }, { 111,1565 },
 { 112,1565 }, { 113,1565 }, { 114,1565 }, { 115,1565 }, { 116,1565 },
 { 117,2217 }, { 118,1565 }, { 119,1565 }, { 120,1565 }, { 121,1565 },
 { 122,1565 }, { 123,2080 }, { 124,2082 }, { 125,1548 }, { 126,2085 },
 { 127,1548 }, { 128,1548 }, { 129,1548 }, { 130,1548 }, { 131,1548 },
 { 132,1548 }, { 133,1548 }, { 134,1548 }, { 135,1548 }, { 136,1548 },
 { 137,1548 }, { 138,1548 }, { 139,1548 }, { 140,1548 }, { 141,1548 },
 { 142,1548 }, { 143,1548 }, { 144,1548 }, { 145,1548 }, { 146,1548 },

 { 147,1548 }, { 148,1548 }, { 149,1548 }, { 150,1548 }, { 151,1548 },
 { 152,1548 }, { 153,1548 }, { 154,1548 }, { 155,1548 }, { 156,1548 },
 { 157,1548 }, { 158,1548 }, { 159,1548 }, { 160,1548 }, { 161,1548 },
 { 162,1548 }, { 163,1548 }, { 164,1548 }, { 165,1548 }, { 166,1548 },
 { 167,1548 }, { 168,1548 }, { 169,1548 }, { 170,1548 }, { 171,1548 },
 { 172,1548 }, { 173,1548 }, { 174,1548 }, { 175,1548 }, { 176,1548 },
 { 177,1548 }, { 178,1548 }, { 179,1548 }, { 180,1548 }, { 181,1548 },
 { 182,1548 }, { 183,1548 }, { 184,1548 }, { 185,1548 }, { 186,1548 },
 { 187,1548 }, { 188,1548 }, { 189,1548 }, { 190,1548 }, { 191,1548 },
 { 192,1548 }, { 193,1548 }, { 194,1548 }, { 195,1548 }, { 196,1548 },

 { 197,1548 }, { 198,1548 }, { 199,1548 }, { 200,1548 }, { 201,1548 },
 { 202,1548 }, { 203,1548 }, { 204,1548 }, { 205,1548 }, { 206,1548 },
 { 207,1548 }, { 208,1548 }, { 209,1548 }, { 210,1548 }, { 211,1548 },
 { 212,1548 }, { 213,1548 }, { 214,1548 }, { 215,1548 }, { 216,1548 },
 { 217,1548 }, { 218,1548 }, { 219,1548 }, { 220,1548 }, { 221,1548 },
 { 222,1548 }, { 223,1548 }, { 224,1548 }, { 225,1548 }, { 226,1548 },
 { 227,1548 }, { 228,1548 }, { 229,1548 }, { 230,1548 }, { 231,1548 },
 { 232,1548 }, { 233,1548 }, { 234,1548 }, { 235,1548 }, { 236,1548 },
 { 237,1548 }, { 238,1548 }, { 239,1548 }, { 240,1548 }, { 241,1548 },
 { 242,1548 }, { 243,1548 }, { 244,1548 }, { 245,1548 }, { 246,1548 },

 { 247,1548 }, { 248,1548 }, { 249,1548 }, { 250,1548 }, { 251,1548 },
 { 252,1548 }, { 253,1548 }, { 254,1548 }, { 255,1548 }, { 256,1548 },
 {   0,   0 }, {   0,6725 }, {   1,1290 }, {   2,1290 }, {   3,1290 },
 {   4,1290 }, {   5,1290 }, {   6,1290 }, {   7,1290 }, {   8,1290 },
 {   9,1292 }, {  10,1294 }, {  11,1290 }, {  12,1292 }, {  13,1290 },
 {  14,1290 }, {  15,1290 }, {  16,1290 }, {  17,1290 }, {  18,1290 },
 {  19,1290 }, {  20,1290 }, {  21,1290 }, {  22,1290 }, {  23,1290 },
 {  24,1290 }, {  25,1290 }, {  26,1290 }, {  27,1290 }, {  28,1290 },
 {  29,1290 }, {  30,1290 }, {  31,1290 }, {  32,1292 }, {  33,1290 },
 {  34,1290 }, {  35,1296 }, {  36,1307 }, {  37,1399 }, {  38,1431 },

 {  39,1506 }, {  40,1433 }, {  41,1435 }, {  42,1437 }, {  43,1439 },
 {  44,1441 }, {  45,1764 }, {  46,1766 }, {  47,1768 }, {  48,1782 },
 {  49,1841 }, {  50,1900 }, {  51,1900 }, {  52,1900 }, {  53,1900 },
 {  54,1900 }, {  55,1900 }, {  56,1900 }, {  57,1900 }, {  58,1784 },
 {  59,1786 }, {  60,1795 }, {  61,1797 }, {  62,1799 }, {  63,1290 },
 {  64,1801 }, {  65,1307 }, {  66,1307 }, {  67,1307 }, {  68,1307 },
 {  69,1307 }, {  70,1307 }, {  71,1307 }, {  72,1307 }, {  73,1307 },
 {  74,1307 }, {  75,1307 }, {  76,1307 }, {  77,1307 }, {  78,1307 },
 {  79,1307 }, {  80,1307 }, {  81,1307 }, {  82,1307 }, {  83,1307 },
 {  84,1307 }, {  85,1959 }, {  86,1307 }, {  87,1307 }, {  88,1307 },

 {  89,1307 }, {  90,1307 }, {  91,1803 }, {  92,1290 }, {  93,1805 },
 {  94,1809 }, {  95,1307 }, {  96,1290 }, {  97,1307 }, {  98,1307 },
 {  99,1307 }, { 100,1307 }, { 101,1307 }, { 102,1307 }, { 103,1307 },
 { 104,1307 }, { 105,1307 }, { 106,1307 }, { 107,1307 }, { 108,1307 },
 { 109,1307 }, { 110,1307 }, { 111,1307 }, { 112,1307 }, { 113,1307 },
 { 114,1307 }, { 115,1307 }, { 116,1307 }, { 117,1959 }, { 118,1307 },
 { 119,1307 }, { 120,1307 }, { 121,1307 }, { 122,1307 }, { 123,1822 },
 { 124,1824 }, { 125,1290 }, { 126,1827 }, { 127,1290 }, { 128,1290 },
 { 129,1290 }, { 130,1290 }, { 131,1290 }, { 132,1290 }, { 133,1290 },
 { 134,1290 }, { 135,1290 }, { 136,1290 }, { 137,1290 }, { 138,1290 },

 { 139,1290 }, { 140,1290 }, { 141,1290 }, { 142,1290 }, { 143,1290 },
 { 144,1290 }, { 145,1290 }, { 146,1290 }, { 147,1290 }, { 148,1290 },
 { 149,1290 }, { 150,1290 }, { 151,1290 }, { 152,1290 }, { 153,1290 },
 { 154,1290 }, { 155,1290 }, { 156,1290 }, { 157,1290 }, { 158,1290 },
 { 159,1290 }, { 160,1290 }, { 161,1290 }, { 162,1290 }, { 163,1290 },
 { 164,1290 }, { 165,1290 }, { 166,1290 }, { 167,1290 }, { 168,1290 },
 { 169,1290 }, { 170,1290 }, { 171,1290 }, { 172,1290 }, { 173,1290 },
 { 174,1290 }, { 175,1290 }, { 176,1290 }, { 177,1290 }, { 178,1290 },
 { 179,1290 }, { 180,1290 }, { 181,1290 }, { 182,1290 }, { 183,1290 },
 { 184,1290 }, { 185,1290 }, { 186,1290 }, { 187,1290 }, { 188,1290 },

 { 189,1290 }, { 190,1290 }, { 191,1290 }, { 192,1290 }, { 193,1290 },
 { 194,1290 }, { 195,1290 }, { 196,1290 }, { 197,1290 }, { 198,1290 },
 { 199,1290 }, { 200,1290 }, { 201,1290 }, { 202,1290 }, { 203,1290 },
 { 204,1290 }, { 205,1290 }, { 206,1290 }, { 207,1290 }, { 208,1290 },
 { 209,1290 }, { 210,1290 }, { 211,1290 }, { 212,1290 }, { 213,1290 },
 { 214,1290 }, { 215,1290 }, { 216,1290 }, { 217,1290 }, { 218,1290 },
 { 219,1290 }, { 220,1290 }, { 221,1290 }, { 222,1290 }, { 223,1290 },
 { 224,1290 }, { 225,1290 }, { 226,1290 }, { 227,1290 }, { 228,1290 },
 { 229,1290 }, { 230,1290 }, { 231,1290 }, { 232,1290 }, { 233,1290 },
 { 234,1290 }, { 235,1290 }, { 236,1290 }, { 237,1290 }, { 238,1290 },

 { 239,1290 }, { 240,1290 }, { 241,1290 }, { 242,1290 }, { 243,1290 },
 { 244,1290 }, { 245,1290 }, { 246,1290 }, { 247,1290 }, { 248,1290 },
 { 249,1290 }, { 250,1290 }, { 251,1290 }, { 252,1290 }, { 253,1290 },
 { 254,1290 }, { 255,1290 }, { 256,1290 }, {   0,   9 }, {   0,6467 },
 {   1,1825 }, {   2,1825 }, {   3,1825 }, {   4,1825 }, {   5,1825 },
 {   6,1825 }, {   7,1825 }, {   8,1825 }, {   9,2083 }, {  10,1647 },
 {  11,1825 }, {  12,1825 }, {  13,1825 }, {  14,1825 }, {  15,1825 },
 {  16,1825 }, {  17,1825 }, {  18,1825 }, {  19,1825 }, {  20,1825 },
 {  21,1825 }, {  22,1825 }, {  23,1825 }, {  24,1825 }, {  25,1825 },
 {  26,1825 }, {  27,1825 }, {  28,1825 }, {  29,1825 }, {  30,1825 },

 {  31,1825 }, {  32,2083 }, {  33,1825 }, {  34,1825 }, {  35,1825 },
 {  36,1825 }, {  37,1825 }, {  38,1825 }, {  39,1825 }, {  40,1825 },
 {  41,1825 }, {  42,1825 }, {  43,1825 }, {  44,1825 }, {  45,1825 },
 {  46,1825 }, {  47,1825 }, {  48,1825 }, {  49,1825 }, {  50,1825 },
 {  51,1825 }, {  52,1825 }, {  53,1825 }, {  54,1825 }, {  55,1825 },
 {  56,1825 }, {  57,1825 }, {  58,1825 }, {  59,1659 }, {  60,1825 },
 {  61,1825 }, {  62,1825 }, {  63,1825 }, {  64,1825 }, {  65,1825 },
 {  66,1825 }, {  67,1825 }, {  68,1825 }, {  69,1825 }, {  70,1825 },
 {  71,1825 }, {  72,1825 }, {  73,1825 }, {  74,1825 }, {  75,1825 },
 {  76,1825 }, {  77,1825 }, {  78,1825 }, {  79,1825 }, {  80,1825 },

 {  81,1825 }, {  82,1825 }, {  83,1825 }, {  84,1825 }, {  85,1825 },
 {  86,1825 }, {  87,1825 }, {  88,1825 }, {  89,1825 }, {  90,1825 },
 {  91,1825 }, {  92,1825 }, {  93,1825 }, {  94,1825 }, {  95,1825 },
 {  96,1825 }, {  97,1825 }, {  98,1825 }, {  99,1825 }, { 100,1825 },
 { 101,1825 }, { 102,1825 }, { 103,1825 }, { 104,1825 }, { 105,1825 },
 { 106,1825 }, { 107,1825 }, { 108,1825 }, { 109,1825 }, { 110,1825 },
 { 111,1825 }, { 112,1825 }, { 113,1825 }, { 114,1825 }, { 115,1825 },
 { 116,1825 }, { 117,1825 }, { 118,1825 }, { 119,1825 }, { 120,1825 },
 { 121,1825 }, { 122,1825 }, { 123,1825 }, { 124,1825 }, { 125,1825 },
 { 126,1825 }, { 127,1825 }, { 128,1825 }, { 129,1825 }, { 130,1825 },

 { 131,1825 }, { 132,1825 }, { 133,1825 }, { 134,1825 }, { 135,1825 },
 { 136,1825 }, { 137,1825 }, { 138,1825 }, { 139,1825 }, { 140,1825 },
 { 141,1825 }, { 142,1825 }, { 143,1825 }, { 144,1825 }, { 145,1825 },
 { 146,1825 }, { 147,1825 }, { 148,1825 }, { 149,1825 }, { 150,1825 },
 { 151,1825 }, { 152,1825 }, { 153,1825 }, { 154,1825 }, { 155,1825 },
 { 156,1825 }, { 157,1825 }, { 158,1825 }, { 159,1825 }, { 160,1825 },
 { 161,1825 }, { 162,1825 }, { 163,1825 }, { 164,1825 }, { 165,1825 },
 { 166,1825 }, { 167,1825 }, { 168,1825 }, { 169,1825 }, { 170,1825 },
 { 171,1825 }, { 172,1825 }, { 173,1825 }, { 174,1825 }, { 175,1825 },
 { 176,1825 }, { 177,1825 }, { 178,1825 }, { 179,1825 }, { 180,1825 },

 { 181,1825 }, { 182,1825 }, { 183,1825 }, { 184,1825 }, { 185,1825 },
 { 186,1825 }, { 187,1825 }, { 188,1825 }, { 189,1825 }, { 190,1825 },
 { 191,1825 }, { 192,1825 }, { 193,1825 }, { 194,1825 }, { 195,1825 },
 { 196,1825 }, { 197,1825 }, { 198,1825 }, { 199,1825 }, { 200,1825 },
 { 201,1825 }, { 202,1825 }, { 203,1825 }, { 204,1825 }, { 205,1825 },
 { 206,1825 }, { 207,1825 }, { 208,1825 }, { 209,1825 }, { 210,1825 },
 { 211,1825 }, { 212,1825 }, { 213,1825 }, { 214,1825 }, { 215,1825 },
 { 216,1825 }, { 217,1825 }, { 218,1825 }, { 219,1825 }, { 220,1825 },
 { 221,1825 }, { 222,1825 }, { 223,1825 }, { 224,1825 }, { 225,1825 },
 { 226,1825 }, { 227,1825 }, { 228,1825 }, { 229,1825 }, { 230,1825 },

 { 231,1825 }, { 232,1825 }, { 233,1825 }, { 234,1825 }, { 235,1825 },
 { 236,1825 }, { 237,1825 }, { 238,1825 }, { 239,1825 }, { 240,1825 },
 { 241,1825 }, { 242,1825 }, { 243,1825 }, { 244,1825 }, { 245,1825 },
 { 246,1825 }, { 247,1825 }, { 248,1825 }, { 249,1825 }, { 250,1825 },
 { 251,1825 }, { 252,1825 }, { 253,1825 }, { 254,1825 }, { 255,1825 },
 { 256,1825 }, {   0,   9 }, {   0,6209 }, {   1,1567 }, {   2,1567 },
 {   3,1567 }, {   4,1567 }, {   5,1567 }, {   6,1567 }, {   7,1567 },
 {   8,1567 }, {   9,1825 }, {  10,1389 }, {  11,1567 }, {  12,1567 },
 {  13,1567 }, {  14,1567 }, {  15,1567 }, {  16,1567 }, {  17,1567 },
 {  18,1567 }, {  19,1567 }, {  20,1567 }, {  21,1567 }, {  22,1567 },

 {  23,1567 }, {  24,1567 }, {  25,1567 }, {  26,1567 }, {  27,1567 },
 {  28,1567 }, {  29,1567 }, {  30,1567 }, {  31,1567 }, {  32,1825 },
 {  33,1567 }, {  34,1567 }, {  35,1567 }, {  36,1567 }, {  37,1567 },
 {  38,1567 }, {  39,1567 }, {  40,1567 }, {  41,1567 }, {  42,1567 },
 {  43,1567 }, {  44,1567 }, {  45,1567 }, {  46,1567 }, {  47,1567 },
 {  48,1567 }, {  49,1567 }, {  50,1567 }, {  51,1567 }, {  52,1567 },
 {  53,1567 }, {  54,1567 }, {  55,1567 }, {  56,1567 }, {  57,1567 },
 {  58,1567 }, {  59,1401 }, {  60,1567 }, {  61,1567 }, {  62,1567 },
 {  63,1567 }, {  64,1567 }, {  65,1567 }, {  66,1567 }, {  67,1567 },
 {  68,1567 }, {  69,1567 }, {  70,1567 }, {  71,1567 }, {  72,1567 },

 {  73,1567 }, {  74,1567 }, {  75,1567 }, {  76,1567 }, {  77,1567 },
 {  78,1567 }, {  79,1567 }, {  80,1567 }, {  81,1567 }, {  82,1567 },
 {  83,1567 }, {  84,1567 }, {  85,1567 }, {  86,1567 }, {  87,1567 },
 {  88,1567 }, {  89,1567 }, {  90,1567 }, {  91,1567 }, {  92,1567 },
 {  93,1567 }, {  94,1567 }, {  95,1567 }, {  96,1567 }, {  97,1567 },
 {  98,1567 }, {  99,1567 }, { 100,1567 }, { 101,1567 }, { 102,1567 },
 { 103,1567 }, { 104,1567 }, { 105,1567 }, { 106,1567 }, { 107,1567 },
 { 108,1567 }, { 109,1567 }, { 110,1567 }, { 111,1567 }, { 112,1567 },
 { 113,1567 }, { 114,1567 }, { 115,1567 }, { 116,1567 }, { 117,1567 },
 { 118,1567 }, { 119,1567 }, { 120,1567 }, { 121,1567 }, { 122,1567 },

 { 123,1567 }, { 124,1567 }, { 125,1567 }, { 126,1567 }, { 127,1567 },
 { 128,1567 }, { 129,1567 }, { 130,1567 }, { 131,1567 }, { 132,1567 },
 { 133,1567 }, { 134,1567 }, { 135,1567 }, { 136,1567 }, { 137,1567 },
 { 138,1567 }, { 139,1567 }, { 140,1567 }, { 141,1567 }, { 142,1567 },
 { 143,1567 }, { 144,1567 }, { 145,1567 }, { 146,1567 }, { 147,1567 },
 { 148,1567 }, { 149,1567 }, { 150,1567 }, { 151,1567 }, { 152,1567 },
 { 153,1567 }, { 154,1567 }, { 155,1567 }, { 156,1567 }, { 157,1567 },
 { 158,1567 }, { 159,1567 }, { 160,1567 }, { 161,1567 }, { 162,1567 },
 { 163,1567 }, { 164,1567 }, { 165,1567 }, { 166,1567 }, { 167,1567 },
 { 168,1567 }, { 169,1567 }, { 170,1567 }, { 171,1567 }, { 172,1567 },

 { 173,1567 }, { 174,1567 }, { 175,1567 }, { 176,1567 }, { 177,1567 },
 { 178,1567 }, { 179,1567 }, { 180,1567 }, { 181,1567 }, { 182,1567 },
 { 183,1567 }, { 184,1567 }, { 185,1567 }, { 186,1567 }, { 187,1567 },
 { 188,1567 }, { 189,1567 }, { 190,1567 }, { 191,1567 }, { 192,1567 },
 { 193,1567 }, { 194,1567 }, { 195,1567 }, { 196,1567 }, { 197,1567 },
 { 198,1567 }, { 199,1567 }, { 200,1567 }, { 201,1567 }, { 202,1567 },
 { 203,1567 }, { 204,1567 }, { 205,1567 }, { 206,1567 }, { 207,1567 },
 { 208,1567 }, { 209,1567 }, { 210,1567 }, { 211,1567 }, { 212,1567 },
 { 213,1567 }, { 214,1567 }, { 215,1567 }, { 216,1567 }, { 217,1567 },
 { 218,1567 }, { 219,1567 }, { 220,1567 }, { 221,1567 }, { 222,1567 },

 { 223,1567 }, { 224,1567 }, { 225,1567 }, { 226,1567 }, { 227,1567 },
 { 228,1567 }, { 229,1567 }, { 230,1567 }, { 231,1567 }, { 232,1567 },
 { 233,1567 }, { 234,1567 }, { 235,1567 }, { 236,1567 }, { 237,1567 },
 { 238,1567 }, { 239,1567 }, { 240,1567 }, { 241,1567 }, { 242,1567 },
 { 243,1567 }, { 244,1567 }, { 245,1567 }, { 246,1567 }, { 247,1567 },
 { 248,1567 }, { 249,1567 }, { 250,1567 }, { 251,1567 }, { 252,1567 },
 { 253,1567 }, { 254,1567 }, { 255,1567 }, { 256,1567 }, {   0,   4 },
 {   0,5951 }, {   1,1145 }, {   2,1145 }, {   3,1145 }, {   4,1145 },
 {   5,1145 }, {   6,1145 }, {   7,1145 }, {   8,1145 }, {   9,1200 },
 {  10,1825 }, {  11,1145 }, {  12,1145 }, {  13,1145 }, {  14,1145 },

 {  15,1145 }, {  16,1145 }, {  17,1145 }, {  18,1145 }, {  19,1145 },
 {  20,1145 }, {  21,1145 }, {  22,1145 }, {  23,1145 }, {  24,1145 },
 {  25,1145 }, {  26,1145 }, {  27,1145 }, {  28,1145 }, {  29,1145 },
 {  30,1145 }, {  31,1145 }, {  32,1200 }, {  33,1145 }, {  34,1145 },
 {  35,1145 }, {  36,1145 }, {  37,1145 }, {  38,1145 }, {  39,1145 },
 {  40,1145 }, {  41,1145 }, {  42,1145 }, {  43,1145 }, {  44,1200 },
 {  45,1145 }, {  46,1145 }, {  47,1145 }, {  48,1827 }, {  49,1827 },
 {  50,1827 }, {  51,1827 }, {  52,1827 }, {  53,1827 }, {  54,1827 },
 {  55,1827 }, {  56,1827 }, {  57,1827 }, {  58,1145 }, {  59,1829 },
 {  60,1145 }, {  61,1145 }, {  62,1145 }, {  63,1145 }, {  64,1145 },

 {  65,1827 }, {  66,1827 }, {  67,1827 }, {  68,1827 }, {  69,1827 },
 {  70,1827 }, {  71,1827 }, {  72,1827 }, {  73,1827 }, {  74,1827 },
 {  75,1827 }, {  76,1827 }, {  77,1827 }, {  78,1827 }, {  79,1827 },
 {  80,1827 }, {  81,1827 }, {  82,1827 }, {  83,1827 }, {  84,1827 },
 {  85,1827 }, {  86,1827 }, {  87,1827 }, {  88,1827 }, {  89,1827 },
 {  90,1827 }, {  91,1145 }, {  92,1145 }, {  93,1145 }, {  94,1145 },
 {  95,1827 }, {  96,1145 }, {  97,1827 }, {  98,1827 }, {  99,1827 },
 { 100,1827 }, { 101,1827 }, { 102,1827 }, { 103,1827 }, { 104,1827 },
 { 105,1827 }, { 106,1827 }, { 107,1827 }, { 108,1827 }, { 109,1827 },
 { 110,1827 }, { 111,1827 }, { 112,1827 }, { 113,1827 }, { 114,1827 },

 { 115,1827 }, { 116,1827 }, { 117,1827 }, { 118,1827 }, { 119,1827 },
 { 120,1827 }, { 121,1827 }, { 122,1827 }, { 123,1951 }, { 124,1145 },
 { 125,1145 }, { 126,1145 }, { 127,1145 }, { 128,1145 }, { 129,1145 },
 { 130,1145 }, { 131,1145 }, { 132,1145 }, { 133,1145 }, { 134,1145 },
 { 135,1145 }, { 136,1145 }, { 137,1145 }, { 138,1145 }, { 139,1145 },
 { 140,1145 }, { 141,1145 }, { 142,1145 }, { 143,1145 }, { 144,1145 },
 { 145,1145 }, { 146,1145 }, { 147,1145 }, { 148,1145 }, { 149,1145 },
 { 150,1145 }, { 151,1145 }, { 152,1145 }, { 153,1145 }, { 154,1145 },
 { 155,1145 }, { 156,1145 }, { 157,1145 }, { 158,1145 }, { 159,1145 },
 { 160,1145 }, { 161,1145 }, { 162,1145 }, { 163,1145 }, { 164,1145 },

 { 165,1145 }, { 166,1145 }, { 167,1145 }, { 168,1145 }, { 169,1145 },
 { 170,1145 }, { 171,1145 }, { 172,1145 }, { 173,1145 }, { 174,1145 },
 { 175,1145 }, { 176,1145 }, { 177,1145 }, { 178,1145 }, { 179,1145 },
 { 180,1145 }, { 181,1145 }, { 182,1145 }, { 183,1145 }, { 184,1145 },
 { 185,1145 }, { 186,1145 }, { 187,1145 }, { 188,1145 }, { 189,1145 },
 { 190,1145 }, { 191,1145 }, { 192,1145 }, { 193,1145 }, { 194,1145 },
 { 195,1145 }, { 196,1145 }, { 197,1145 }, { 198,1145 }, { 199,1145 },
 { 200,1145 }, { 201,1145 }, { 202,1145 }, { 203,1145 }, { 204,1145 },
 { 205,1145 }, { 206,1145 }, { 207,1145 }, { 208,1145 }, { 209,1145 },
 { 210,1145 }, { 211,1145 }, { 212,1145 }, { 213,1145 }, { 214,1145 },

 { 215,1145 }, { 216,1145 }, { 217,1145 }, { 218,1145 }, { 219,1145 },
 { 220,1145 }, { 221,1145 }, { 222,1145 }, { 223,1145 }, { 224,1145 },
 { 225,1145 }, { 226,1145 }, { 227,1145 }, { 228,1145 }, { 229,1145 },
 { 230,1145 }, { 231,1145 }, { 232,1145 }, { 233,1145 }, { 234,1145 },
 { 235,1145 }, { 236,1145 }, { 237,1145 }, { 238,1145 }, { 239,1145 },
 { 240,1145 }, { 241,1145 }, { 242,1145 }, { 243,1145 }, { 244,1145 },
 { 245,1145 }, { 246,1145 }, { 247,1145 }, { 248,1145 }, { 249,1145 },
 { 250,1145 }, { 251,1145 }, { 252,1145 }, { 253,1145 }, { 254,1145 },
 { 255,1145 }, { 256,1145 }, {   0,   4 }, {   0,5693 }, {   1, 887 },
 {   2, 887 }, {   3, 887 }, {   4, 887 }, {   5, 887 }, {   6, 887 },

 {   7, 887 }, {   8, 887 }, {   9, 942 }, {  10,1567 }, {  11, 887 },
 {  12, 887 }, {  13, 887 }, {  14, 887 }, {  15, 887 }, {  16, 887 },
 {  17, 887 }, {  18, 887 }, {  19, 887 }, {  20, 887 }, {  21, 887 },
 {  22, 887 }, {  23, 887 }, {  24, 887 }, {  25, 887 }, {  26, 887 },
 {  27, 887 }, {  28, 887 }, {  29, 887 }, {  30, 887 }, {  31, 887 },
 {  32, 942 }, {  33, 887 }, {  34, 887 }, {  35, 887 }, {  36, 887 },
 {  37, 887 }, {  38, 887 }, {  39, 887 }, {  40, 887 }, {  41, 887 },
 {  42, 887 }, {  43, 887 }, {  44, 942 }, {  45, 887 }, {  46, 887 },
 {  47, 887 }, {  48,1569 }, {  49,1569 }, {  50,1569 }, {  51,1569 },
 {  52,1569 }, {  53,1569 }, {  54,1569 }, {  55,1569 }, {  56,1569 },

 {  57,1569 }, {  58, 887 }, {  59,1571 }, {  60, 887 }, {  61, 887 },
 {  62, 887 }, {  63, 887 }, {  64, 887 }, {  65,1569 }, {  66,1569 },
 {  67,1569 }, {  68,1569 }, {  69,1569 }, {  70,1569 }, {  71,1569 },
 {  72,1569 }, {  73,1569 }, {  74,1569 }, {  75,1569 }, {  76,1569 },
 {  77,1569 }, {  78,1569 }, {  79,1569 }, {  80,1569 }, {  81,1569 },
 {  82,1569 }, {  83,1569 }, {  84,1569 }, {  85,1569 }, {  86,1569 },
 {  87,1569 }, {  88,1569 }, {  89,1569 }, {  90,1569 }, {  91, 887 },
 {  92, 887 }, {  93, 887 }, {  94, 887 }, {  95,1569 }, {  96, 887 },
 {  97,1569 }, {  98,1569 }, {  99,1569 }, { 100,1569 }, { 101,1569 },
 { 102,1569 }, { 103,1569 }, { 104,1569 }, { 105,1569 }, { 106,1569 },

 { 107,1569 }, { 108,1569 }, { 109,1569 }, { 110,1569 }, { 111,1569 },
 { 112,1569 }, { 113,1569 }, { 114,1569 }, { 115,1569 }, { 116,1569 },
 { 117,1569 }, { 118,1569 }, { 119,1569 }, { 120,1569 }, { 121,1569 },
 { 122,1569 }, { 123,1693 }, { 124, 887 }, { 125, 887 }, { 126, 887 },
 { 127, 887 }, { 128, 887 }, { 129, 887 }, { 130, 887 }, { 131, 887 },
 { 132, 887 }, { 133, 887 }, { 134, 887 }, { 135, 887 }, { 136, 887 },
 { 137, 887 }, { 138, 887 }, { 139, 887 }, { 140, 887 }, { 141, 887 },
 { 142, 887 }, { 143, 887 }, { 144, 887 }, { 145, 887 }, { 146, 887 },
 { 147, 887 }, { 148, 887 }, { 149, 887 }, { 150, 887 }, { 151, 887 },
 { 152, 887 }, { 153, 887 }, { 154, 887 }, { 155, 887 }, { 156, 887 },

 { 157, 887 }, { 158, 887 }, { 159, 887 }, { 160, 887 }, { 161, 887 },
 { 162, 887 }, { 163, 887 }, { 164, 887 }, { 165, 887 }, { 166, 887 },
 { 167, 887 }, { 168, 887 }, { 169, 887 }, { 170, 887 }, { 171, 887 },
 { 172, 887 }, { 173, 887 }, { 174, 887 }, { 175, 887 }, { 176, 887 },
 { 177, 887 }, { 178, 887 }, { 179, 887 }, { 180, 887 }, { 181, 887 },
 { 182, 887 }, { 183, 887 }, { 184, 887 }, { 185, 887 }, { 186, 887 },
 { 187, 887 }, { 188, 887 }, { 189, 887 }, { 190, 887 }, { 191, 887 },
 { 192, 887 }, { 193, 887 }, { 194, 887 }, { 195, 887 }, { 196, 887 },
 { 197, 887 }, { 198, 887 }, { 199, 887 }, { 200, 887 }, { 201, 887 },
 { 202, 887 }, { 203, 887 }, { 204, 887 }, { 205, 887 }, { 206, 887 },

 { 207, 887 }, { 208, 887 }, { 209, 887 }, { 210, 887 }, { 211, 887 },
 { 212, 887 }, { 213, 887 }, { 214, 887 }, { 215, 887 }, { 216, 887 },
 { 217, 887 }, { 218, 887 }, { 219, 887 }, { 220, 887 }, { 221, 887 },
 { 222, 887 }, { 223, 887 }, { 224, 887 }, { 225, 887 }, { 226, 887 },
 { 227, 887 }, { 228, 887 }, { 229, 887 }, { 230, 887 }, { 231, 887 },
 { 232, 887 }, { 233, 887 }, { 234, 887 }, { 235, 887 }, { 236, 887 },
 { 237, 887 }, { 238, 887 }, { 239, 887 }, { 240, 887 }, { 241, 887 },
 { 242, 887 }, { 243, 887 }, { 244, 887 }, { 245, 887 }, { 246, 887 },
 { 247, 887 }, { 248, 887 }, { 249, 887 }, { 250, 887 }, { 251, 887 },
 { 252, 887 }, { 253, 887 }, { 254, 887 }, { 255, 887 }, { 256, 887 },

 {   0,  60 }, {   0,5435 }, {   0,  58 }, {   0,5433 }, {   0,  59 },
 {   0,5431 }, {   0,  60 }, {   0,5429 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   9,1313 }, {   0,   0 }, {   0,   0 },
 {  12,1313 }, {   0,   0 }, {   0,  56 }, {   0,5418 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  32,1313 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  36,1687 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  36,1759 },
 {  48,1710 }, {  49,1710 }, {  50,1710 }, {  51,1710 }, {  52,1710 },
 {  53,1710 }, {  54,1710 }, {  55,1710 }, {  56,1710 }, {  57,1710 },
 {   0,   0 }, {  48,1759 }, {  49,1759 }, {  50,1759 }, {  51,1759 },
 {  52,1759 }, {  53,1759 }, {  54,1759 }, {  55,1759 }, {  56,1759 },
 {  57,1759 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  73,1690 }, {   0,   0 }, {   0,   0 }, {  65,1759 }, {  66,1759 },
 {  67,1759 }, {  68,1759 }, {  69,1759 }, {  70,1759 }, {  71,1759 },
 {  72,1759 }, {  73,1759 }, {  74,1759 }, {  75,1759 }, {  76,1759 },
 {  77,1759 }, {  78,1759 }, {  79,1759 }, {  80,1759 }, {  81,1759 },

 {  82,1759 }, {  83,1759 }, {  84,1759 }, {  85,1759 }, {  86,1759 },
 {  87,1759 }, {  88,1759 }, {  89,1759 }, {  90,1759 }, {   0,  60 },
 {   0,5326 }, {   0,   0 }, { 105,1690 }, {  95,1759 }, {   0,   0 },
 {  97,1759 }, {  98,1759 }, {  99,1759 }, { 100,1759 }, { 101,1759 },
 { 102,1759 }, { 103,1759 }, { 104,1759 }, { 105,1759 }, { 106,1759 },
 { 107,1759 }, { 108,1759 }, { 109,1759 }, { 110,1759 }, { 111,1759 },
 { 112,1759 }, { 113,1759 }, { 114,1759 }, { 115,1759 }, { 116,1759 },
 { 117,1759 }, { 118,1759 }, { 119,1759 }, { 120,1759 }, { 121,1759 },
 { 122,1759 }, {   0,  28 }, {   0,5294 }, {   0,  17 }, {   0,5292 },
 {   0,  18 }, {   0,5290 }, {   0,  23 }, {   0,5288 }, {   0,  24 },

 {   0,5286 }, {   0,  39 }, {   0,5284 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  48,1595 }, {  49,1595 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  73,1597 }, {   0,   0 },
 {   0,   0 }, {  42,1637 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  46,1639 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  61,1567 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  61,1639 },
 {   0,   0 }, {  61,1639 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 { 105,1597 }, {   0,  60 }, {   0,5219 }, {   1,1684 }, {   2,1684 },
 {   3,1684 }, {   4,1684 }, {   5,1684 }, {   6,1684 }, {   7,1684 },
 {   8,1684 }, {   9,1684 }, {  10,1684 }, {  11,1684 }, {  12,1684 },
 {  13,1684 }, {  14,1684 }, {  15,1684 }, {  16,1684 }, {  17,1684 },
 {  18,1684 }, {  19,1684 }, {  20,1684 }, {  21,1684 }, {  22,1684 },
 {  23,1684 }, {  24,1684 }, {  25,1684 }, {  26,1684 }, {  27,1684 },
 {  28,1684 }, {  29,1684 }, {  30,1684 }, {  31,1684 }, {  32,1684 },

 {  33,1684 }, {  34,1684 }, {  35,1684 }, {  36,1684 }, {  37,1684 },
 {  38,1684 }, {  39,1562 }, {  40,1684 }, {  41,1684 }, {  42,1684 },
 {  43,1684 }, {  44,1684 }, {  45,1684 }, {  46,1684 }, {  47,1684 },
 {  48,1684 }, {  49,1684 }, {  50,1684 }, {  51,1684 }, {  52,1684 },
 {  53,1684 }, {  54,1684 }, {  55,1684 }, {  56,1684 }, {  57,1684 },
 {  58,1684 }, {  59,1684 }, {  60,1684 }, {  61,1684 }, {  62,1684 },
 {  63,1684 }, {  64,1684 }, {  65,1684 }, {  66,1684 }, {  67,1684 },
 {  68,1684 }, {  69,1684 }, {  70,1684 }, {  71,1684 }, {  72,1684 },
 {  73,1684 }, {  74,1684 }, {  75,1684 }, {  76,1684 }, {  77,1684 },
 {  78,1684 }, {  79,1684 }, {  80,1684 }, {  81,1684 }, {  82,1684 },

 {  83,1684 }, {  84,1684 }, {  85,1684 }, {  86,1684 }, {  87,1684 },
 {  88,1684 }, {  89,1684 }, {  90,1684 }, {  91,1684 }, {  92,1684 },
 {  93,1684 }, {  94,1684 }, {  95,1684 }, {  96,1684 }, {  97,1684 },
 {  98,1684 }, {  99,1684 }, { 100,1684 }, { 101,1684 }, { 102,1684 },
 { 103,1684 }, { 104,1684 }, { 105,1684 }, { 106,1684 }, { 107,1684 },
 { 108,1684 }, { 109,1684 }, { 110,1684 }, { 111,1684 }, { 112,1684 },
 { 113,1684 }, { 114,1684 }, { 115,1684 }, { 116,1684 }, { 117,1684 },
 { 118,1684 }, { 119,1684 }, { 120,1684 }, { 121,1684 }, { 122,1684 },
 { 123,1684 }, { 124,1684 }, { 125,1684 }, { 126,1684 }, { 127,1684 },
 { 128,1684 }, { 129,1684 }, { 130,1684 }, { 131,1684 }, { 132,1684 },

 { 133,1684 }, { 134,1684 }, { 135,1684 }, { 136,1684 }, { 137,1684 },
 { 138,1684 }, { 139,1684 }, { 140,1684 }, { 141,1684 }, { 142,1684 },
 { 143,1684 }, { 144,1684 }, { 145,1684 }, { 146,1684 }, { 147,1684 },
 { 148,1684 }, { 149,1684 }, { 150,1684 }, { 151,1684 }, { 152,1684 },
 { 153,1684 }, { 154,1684 }, { 155,1684 }, { 156,1684 }, { 157,1684 },
 { 158,1684 }, { 159,1684 }, { 160,1684 }, { 161,1684 }, { 162,1684 },
 { 163,1684 }, { 164,1684 }, { 165,1684 }, { 166,1684 }, { 167,1684 },
 { 168,1684 }, { 169,1684 }, { 170,1684 }, { 171,1684 }, { 172,1684 },
 { 173,1684 }, { 174,1684 }, { 175,1684 }, { 176,1684 }, { 177,1684 },
 { 178,1684 }, { 179,1684 }, { 180,1684 }, { 181,1684 }, { 182,1684 },

 { 183,1684 }, { 184,1684 }, { 185,1684 }, { 186,1684 }, { 187,1684 },
 { 188,1684 }, { 189,1684 }, { 190,1684 }, { 191,1684 }, { 192,1684 },
 { 193,1684 }, { 194,1684 }, { 195,1684 }, { 196,1684 }, { 197,1684 },
 { 198,1684 }, { 199,1684 }, { 200,1684 }, { 201,1684 }, { 202,1684 },
 { 203,1684 }, { 204,1684 }, { 205,1684 }, { 206,1684 }, { 207,1684 },
 { 208,1684 }, { 209,1684 }, { 210,1684 }, { 211,1684 }, { 212,1684 },
 { 213,1684 }, { 214,1684 }, { 215,1684 }, { 216,1684 }, { 217,1684 },
 { 218,1684 }, { 219,1684 }, { 220,1684 }, { 221,1684 }, { 222,1684 },
 { 223,1684 }, { 224,1684 }, { 225,1684 }, { 226,1684 }, { 227,1684 },
 { 228,1684 }, { 229,1684 }, { 230,1684 }, { 231,1684 }, { 232,1684 },

 { 233,1684 }, { 234,1684 }, { 235,1684 }, { 236,1684 }, { 237,1684 },
 { 238,1684 }, { 239,1684 }, { 240,1684 }, { 241,1684 }, { 242,1684 },
 { 243,1684 }, { 244,1684 }, { 245,1684 }, { 246,1684 }, { 247,1684 },
 { 248,1684 }, { 249,1684 }, { 250,1684 }, { 251,1684 }, { 252,1684 },
 { 253,1684 }, { 254,1684 }, { 255,1684 }, { 256,1684 }, {   0,  25 },
 {   0,4961 }, {   0,  40 }, {   0,4959 }, {   0,  42 }, {   0,4957 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,  55 }, {   0,4943 }, {   0,  46 },
 {   0,4941 }, {   0,  47 }, {   0,4939 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,  50 }, {   0,4930 }, {   0,  52 }, {   0,4928 }, {   0,  51 },
 {   0,4926 }, {   0,  43 }, {   0,4924 }, {   0,  21 }, {   0,4922 },
 {   0,  22 }, {   0,4920 }, {   0,   0 }, {  41,1323 }, {   0,  44 },
 {   0,4916 }, {   0,   0 }, {   0,   0 }, {  46,1325 }, {   0,   0 },
 {   0,   0 }, {  47,1325 }, {   0,   0 }, {  35,1666 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,  16 }, {   0,4903 }, {   0,  29 },
 {   0,4901 }, {  61,1323 }, {   0,  38 }, {   0,4898 }, {  46,1689 },
 {  61,1327 }, {  48,1725 }, {  49,1725 }, {  50,1784 }, {  51,1784 },
 {  52,1784 }, {  53,1784 }, {  54,1784 }, {  55,1784 }, {  56,1784 },

 {  57,1784 }, {   0,  55 }, {   0,4884 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  61,1316 }, {   0,   0 }, {  65,1843 }, {  66,1902 },
 {  67,1843 }, {  68,1843 }, {  69,1962 }, {  70,1843 }, {   0,   0 },
 {  72,1316 }, {  60,1655 }, {  61,1657 }, {  62,1659 }, {  36,1656 },
 {   0,   0 }, {  61,1657 }, {  62,1669 }, {   0,   0 }, {   0,   0 },
 {  42,1658 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  88,1987 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  35,1607 }, {   0,   0 }, {   0,   0 },
 {  97,1843 }, {  98,1902 }, {  99,1843 }, { 100,1843 }, { 101,1962 },
 { 102,1843 }, {  61,1658 }, { 104,1316 }, {  46,1630 }, {   0,   0 },

 {  48,1666 }, {  49,1666 }, {  50,1725 }, {  51,1725 }, {  52,1725 },
 {  53,1725 }, {  54,1725 }, {  55,1725 }, {  56,1725 }, {  57,1725 },
 {   0,  55 }, {   0,4825 }, {   0,   0 }, { 120,1987 }, {   0,   0 },
 {   0,   9 }, {   0,4820 }, {  65,1784 }, {  66,1843 }, {  67,1784 },
 {  68,1784 }, {  69,1903 }, {  70,1784 }, {   0,   0 }, {  72,1257 },
 {   9,1666 }, {  10,1666 }, {   0,  11 }, {   0,4808 }, {   0,   8 },
 {   0,4806 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  35,1548 }, {   0,   0 }, {  32,1666 }, {  97,1784 },

 {  98,1843 }, {  99,1784 }, { 100,1784 }, { 101,1903 }, { 102,1784 },
 {   0,   0 }, { 104,1257 }, {  46,1571 }, {   0,   0 }, {  48,1666 },
 {  49,1666 }, {  50,1666 }, {  51,1666 }, {  52,1666 }, {  53,1666 },
 {  54,1666 }, {  55,1666 }, {  56,1666 }, {  57,1666 }, {   0,  56 },
 {   0,4766 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  65,1725 }, {  66,1725 }, {  67,1725 }, {  68,1725 },
 {  69,1844 }, {  70,1725 }, {   0,   0 }, {  72,1198 }, {   0,   4 },
 {   0,4751 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   9,2494 },
 {  10,2494 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  36,1107 }, {   0,   0 }, {  97,1725 }, {  98,1725 },
 {  99,1725 }, { 100,1725 }, { 101,1844 }, { 102,1725 }, {   0,   0 },
 { 104,1198 }, {   0,   0 }, {  32,2494 }, {  48,1107 }, {  49,1107 },
 {  50,1107 }, {  51,1107 }, {  52,1107 }, {  53,1107 }, {  54,1107 },
 {  55,1107 }, {  56,1107 }, {  57,1107 }, {   0,   0 }, {  44,2494 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  65,1107 }, {  66,1107 }, {  67,1107 }, {  68,1107 }, {  69,1107 },
 {  70,1107 }, {  71,1107 }, {  72,1107 }, {  73,1107 }, {  74,1107 },
 {  75,1107 }, {  76,1107 }, {  77,1107 }, {  78,1107 }, {  79,1107 },

 {  80,1107 }, {  81,1107 }, {  82,1107 }, {  83,1869 }, {  84,1107 },
 {  85,1107 }, {  86,1107 }, {  87,1107 }, {  88,1107 }, {  89,1107 },
 {  90,1107 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  95,1107 }, {   0,   0 }, {  97,1107 }, {  98,1107 }, {  99,1107 },
 { 100,1107 }, { 101,1107 }, { 102,1107 }, { 103,1107 }, { 104,1107 },
 { 105,1107 }, { 106,1107 }, { 107,1107 }, { 108,1107 }, { 109,1107 },
 { 110,1107 }, { 111,1107 }, { 112,1107 }, { 113,1107 }, { 114,1107 },
 { 115,1869 }, { 116,1107 }, { 117,1107 }, { 118,1107 }, { 119,1107 },
 { 120,1107 }, { 121,1107 }, { 122,1107 }, {   0,  10 }, {   0,4642 },
 {   1,1869 }, {   2,1869 }, {   3,1869 }, {   4,1869 }, {   5,1869 },

 {   6,1869 }, {   7,1869 }, {   8,1869 }, {   9,1869 }, {   0,   0 },
 {  11,1869 }, {  12,1869 }, {  13,1869 }, {  14,1869 }, {  15,1869 },
 {  16,1869 }, {  17,1869 }, {  18,1869 }, {  19,1869 }, {  20,1869 },
 {  21,1869 }, {  22,1869 }, {  23,1869 }, {  24,1869 }, {  25,1869 },
 {  26,1869 }, {  27,1869 }, {  28,1869 }, {  29,1869 }, {  30,1869 },
 {  31,1869 }, {  32,1869 }, {  33,1869 }, {  34,1869 }, {  35,1869 },
 {  36,1869 }, {  37,1869 }, {  38,1869 }, {  39,1869 }, {  40,1869 },
 {  41,1869 }, {  42,1869 }, {  43,1869 }, {  44,1869 }, {  45,1869 },
 {  46,1869 }, {  47,1869 }, {  48,1869 }, {  49,1869 }, {  50,1869 },
 {  51,1869 }, {  52,1869 }, {  53,1869 }, {  54,1869 }, {  55,1869 },

 {  56,1869 }, {  57,1869 }, {  58,1869 }, {  59,1401 }, {  60,1869 },
 {  61,1869 }, {  62,1869 }, {  63,1869 }, {  64,1869 }, {  65,1869 },
 {  66,1869 }, {  67,1869 }, {  68,1869 }, {  69,1869 }, {  70,1869 },
 {  71,1869 }, {  72,1869 }, {  73,1869 }, {  74,1869 }, {  75,1869 },
 {  76,1869 }, {  77,1869 }, {  78,1869 }, {  79,1869 }, {  80,1869 },
 {  81,1869 }, {  82,1869 }, {  83,1869 }, {  84,1869 }, {  85,1869 },
 {  86,1869 }, {  87,1869 }, {  88,1869 }, {  89,1869 }, {  90,1869 },
 {  91,1869 }, {  92,1869 }, {  93,1869 }, {  94,1869 }, {  95,1869 },
 {  96,1869 }, {  97,1869 }, {  98,1869 }, {  99,1869 }, { 100,1869 },
 { 101,1869 }, { 102,1869 }, { 103,1869 }, { 104,1869 }, { 105,1869 },

 { 106,1869 }, { 107,1869 }, { 108,1869 }, { 109,1869 }, { 110,1869 },
 { 111,1869 }, { 112,1869 }, { 113,1869 }, { 114,1869 }, { 115,1869 },
 { 116,1869 }, { 117,1869 }, { 118,1869 }, { 119,1869 }, { 120,1869 },
 { 121,1869 }, { 122,1869 }, { 123,1869 }, { 124,1869 }, { 125,1869 },
 { 126,1869 }, { 127,1869 }, { 128,1869 }, { 129,1869 }, { 130,1869 },
 { 131,1869 }, { 132,1869 }, { 133,1869 }, { 134,1869 }, { 135,1869 },
 { 136,1869 }, { 137,1869 }, { 138,1869 }, { 139,1869 }, { 140,1869 },
 { 141,1869 }, { 142,1869 }, { 143,1869 }, { 144,1869 }, { 145,1869 },
 { 146,1869 }, { 147,1869 }, { 148,1869 }, { 149,1869 }, { 150,1869 },
 { 151,1869 }, { 152,1869 }, { 153,1869 }, { 154,1869 }, { 155,1869 },

 { 156,1869 }, { 157,1869 }, { 158,1869 }, { 159,1869 }, { 160,1869 },
 { 161,1869 }, { 162,1869 }, { 163,1869 }, { 164,1869 }, { 165,1869 },
 { 166,1869 }, { 167,1869 }, { 168,1869 }, { 169,1869 }, { 170,1869 },
 { 171,1869 }, { 172,1869 }, { 173,1869 }, { 174,1869 }, { 175,1869 },
 { 176,1869 }, { 177,1869 }, { 178,1869 }, { 179,1869 }, { 180,1869 },
 { 181,1869 }, { 182,1869 }, { 183,1869 }, { 184,1869 }, { 185,1869 },
 { 186,1869 }, { 187,1869 }, { 188,1869 }, { 189,1869 }, { 190,1869 },
 { 191,1869 }, { 192,1869 }, { 193,1869 }, { 194,1869 }, { 195,1869 },
 { 196,1869 }, { 197,1869 }, { 198,1869 }, { 199,1869 }, { 200,1869 },
 { 201,1869 }, { 202,1869 }, { 203,1869 }, { 204,1869 }, { 205,1869 },

 { 206,1869 }, { 207,1869 }, { 208,1869 }, { 209,1869 }, { 210,1869 },
 { 211,1869 }, { 212,1869 }, { 213,1869 }, { 214,1869 }, { 215,1869 },
 { 216,1869 }, { 217,1869 }, { 218,1869 }, { 219,1869 }, { 220,1869 },
 { 221,1869 }, { 222,1869 }, { 223,1869 }, { 224,1869 }, { 225,1869 },
 { 226,1869 }, { 227,1869 }, { 228,1869 }, { 229,1869 }, { 230,1869 },
 { 231,1869 }, { 232,1869 }, { 233,1869 }, { 234,1869 }, { 235,1869 },
 { 236,1869 }, { 237,1869 }, { 238,1869 }, { 239,1869 }, { 240,1869 },
 { 241,1869 }, { 242,1869 }, { 243,1869 }, { 244,1869 }, { 245,1869 },
 { 246,1869 }, { 247,1869 }, { 248,1869 }, { 249,1869 }, { 250,1869 },
 { 251,1869 }, { 252,1869 }, { 253,1869 }, { 254,1869 }, { 255,1869 },

 { 256,1869 }, {   0,   9 }, {   0,4384 }, {   1,1611 }, {   2,1611 },
 {   3,1611 }, {   4,1611 }, {   5,1611 }, {   6,1611 }, {   7,1611 },
 {   8,1611 }, {   9,1869 }, {  10,1230 }, {  11,1611 }, {  12,1611 },
 {  13,1611 }, {  14,1611 }, {  15,1611 }, {  16,1611 }, {  17,1611 },
 {  18,1611 }, {  19,1611 }, {  20,1611 }, {  21,1611 }, {  22,1611 },
 {  23,1611 }, {  24,1611 }, {  25,1611 }, {  26,1611 }, {  27,1611 },
 {  28,1611 }, {  29,1611 }, {  30,1611 }, {  31,1611 }, {  32,1869 },
 {  33,1611 }, {  34,1611 }, {  35,1611 }, {  36,1611 }, {  37,1611 },
 {  38,1611 }, {  39,1611 }, {  40,1611 }, {  41,1611 }, {  42,1611 },
 {  43,1611 }, {  44,1611 }, {  45,1611 }, {  46,1611 }, {  47,1611 },

 {  48,1611 }, {  49,1611 }, {  50,1611 }, {  51,1611 }, {  52,1611 },
 {  53,1611 }, {  54,1611 }, {  55,1611 }, {  56,1611 }, {  57,1611 },
 {  58,1611 }, {  59,1143 }, {  60,1611 }, {  61,1611 }, {  62,1611 },
 {  63,1611 }, {  64,1611 }, {  65,1611 }, {  66,1611 }, {  67,1611 },
 {  68,1611 }, {  69,1611 }, {  70,1611 }, {  71,1611 }, {  72,1611 },
 {  73,1611 }, {  74,1611 }, {  75,1611 }, {  76,1611 }, {  77,1611 },
 {  78,1611 }, {  79,1611 }, {  80,1611 }, {  81,1611 }, {  82,1611 },
 {  83,1611 }, {  84,1611 }, {  85,1611 }, {  86,1611 }, {  87,1611 },
 {  88,1611 }, {  89,1611 }, {  90,1611 }, {  91,1611 }, {  92,1611 },
 {  93,1611 }, {  94,1611 }, {  95,1611 }, {  96,1611 }, {  97,1611 },

 {  98,1611 }, {  99,1611 }, { 100,1611 }, { 101,1611 }, { 102,1611 },
 { 103,1611 }, { 104,1611 }, { 105,1611 }, { 106,1611 }, { 107,1611 },
 { 108,1611 }, { 109,1611 }, { 110,1611 }, { 111,1611 }, { 112,1611 },
 { 113,1611 }, { 114,1611 }, { 115,1611 }, { 116,1611 }, { 117,1611 },
 { 118,1611 }, { 119,1611 }, { 120,1611 }, { 121,1611 }, { 122,1611 },
 { 123,1611 }, { 124,1611 }, { 125,1611 }, { 126,1611 }, { 127,1611 },
 { 128,1611 }, { 129,1611 }, { 130,1611 }, { 131,1611 }, { 132,1611 },
 { 133,1611 }, { 134,1611 }, { 135,1611 }, { 136,1611 }, { 137,1611 },
 { 138,1611 }, { 139,1611 }, { 140,1611 }, { 141,1611 }, { 142,1611 },
 { 143,1611 }, { 144,1611 }, { 145,1611 }, { 146,1611 }, { 147,1611 },

 { 148,1611 }, { 149,1611 }, { 150,1611 }, { 151,1611 }, { 152,1611 },
 { 153,1611 }, { 154,1611 }, { 155,1611 }, { 156,1611 }, { 157,1611 },
 { 158,1611 }, { 159,1611 }, { 160,1611 }, { 161,1611 }, { 162,1611 },
 { 163,1611 }, { 164,1611 }, { 165,1611 }, { 166,1611 }, { 167,1611 },
 { 168,1611 }, { 169,1611 }, { 170,1611 }, { 171,1611 }, { 172,1611 },
 { 173,1611 }, { 174,1611 }, { 175,1611 }, { 176,1611 }, { 177,1611 },
 { 178,1611 }, { 179,1611 }, { 180,1611 }, { 181,1611 }, { 182,1611 },
 { 183,1611 }, { 184,1611 }, { 185,1611 }, { 186,1611 }, { 187,1611 },
 { 188,1611 }, { 189,1611 }, { 190,1611 }, { 191,1611 }, { 192,1611 },
 { 193,1611 }, { 194,1611 }, { 195,1611 }, { 196,1611 }, { 197,1611 },

 { 198,1611 }, { 199,1611 }, { 200,1611 }, { 201,1611 }, { 202,1611 },
 { 203,1611 }, { 204,1611 }, { 205,1611 }, { 206,1611 }, { 207,1611 },
 { 208,1611 }, { 209,1611 }, { 210,1611 }, { 211,1611 }, { 212,1611 },
 { 213,1611 }, { 214,1611 }, { 215,1611 }, { 216,1611 }, { 217,1611 },
 { 218,1611 }, { 219,1611 }, { 220,1611 }, { 221,1611 }, { 222,1611 },
 { 223,1611 }, { 224,1611 }, { 225,1611 }, { 226,1611 }, { 227,1611 },
 { 228,1611 }, { 229,1611 }, { 230,1611 }, { 231,1611 }, { 232,1611 },
 { 233,1611 }, { 234,1611 }, { 235,1611 }, { 236,1611 }, { 237,1611 },
 { 238,1611 }, { 239,1611 }, { 240,1611 }, { 241,1611 }, { 242,1611 },
 { 243,1611 }, { 244,1611 }, { 245,1611 }, { 246,1611 }, { 247,1611 },

 { 248,1611 }, { 249,1611 }, { 250,1611 }, { 251,1611 }, { 252,1611 },
 { 253,1611 }, { 254,1611 }, { 255,1611 }, { 256,1611 }, {   0,   4 },
 {   0,4126 }, {   0,   6 }, {   0,4124 }, {   0,   7 }, {   0,4122 },
 {   0,  58 }, {   0,4120 }, {   0,   0 }, {   0,   0 }, {   9,1869 },
 {  10,1869 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   9,   0 }, {   0,   0 }, {   0,   0 }, {  12,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  32,1869 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  32,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  44,1869 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  48,1869 }, {  49,1869 }, {  50,1869 }, {  51,1869 }, {  52,1869 },
 {  53,1869 }, {  54,1869 }, {  55,1869 }, {  56,1869 }, {  57,1869 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  65,1869 }, {  66,1869 }, {  67,1869 },
 {  68,1869 }, {  69,1869 }, {  70,1869 }, {  71,1869 }, {  72,1869 },
 {  73,1869 }, {  74,1869 }, {  75,1869 }, {  76,1869 }, {  77,1869 },
 {  78,1869 }, {  79,1869 }, {  80,1869 }, {  81,1869 }, {  82,1869 },
 {  83,1869 }, {  84,1869 }, {  85,1869 }, {  86,1869 }, {  87,1869 },

 {  88,1869 }, {  89,1869 }, {  90,1869 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  95,1869 }, {   0,   0 }, {  97,1869 },
 {  98,1869 }, {  99,1869 }, { 100,1869 }, { 101,1869 }, { 102,1869 },
 { 103,1869 }, { 104,1869 }, { 105,1869 }, { 106,1869 }, { 107,1869 },
 { 108,1869 }, { 109,1869 }, { 110,1869 }, { 111,1869 }, { 112,1869 },
 { 113,1869 }, { 114,1869 }, { 115,1869 }, { 116,1869 }, { 117,1869 },
 { 118,1869 }, { 119,1869 }, { 120,1869 }, { 121,1869 }, { 122,1869 },
 {   0,   8 }, {   0,4000 }, {   1,1869 }, {   2,1869 }, {   3,1869 },
 {   4,1869 }, {   5,1869 }, {   6,1869 }, {   7,1869 }, {   8,1869 },
 {   9,1869 }, {  10,1869 }, {  11,1869 }, {  12,1869 }, {  13,1869 },

 {  14,1869 }, {  15,1869 }, {  16,1869 }, {  17,1869 }, {  18,1869 },
 {  19,1869 }, {  20,1869 }, {  21,1869 }, {  22,1869 }, {  23,1869 },
 {  24,1869 }, {  25,1869 }, {  26,1869 }, {  27,1869 }, {  28,1869 },
 {  29,1869 }, {  30,1869 }, {  31,1869 }, {  32,1869 }, {  33,1869 },
 {  34,1869 }, {  35,1869 }, {  36,1869 }, {  37,1869 }, {  38,1869 },
 {  39,1869 }, {  40,1869 }, {  41,1869 }, {  42,1869 }, {  43,1869 },
 {  44,1869 }, {  45,1869 }, {  46,1869 }, {  47,1869 }, {  48,1869 },
 {  49,1869 }, {  50,1869 }, {  51,1869 }, {  52,1869 }, {  53,1869 },
 {  54,1869 }, {  55,1869 }, {  56,1869 }, {  57,1869 }, {  58,1869 },
 {  59,1869 }, {  60,1869 }, {  61,1869 }, {  62,1869 }, {  63,1869 },

 {  64,1869 }, {  65,1869 }, {  66,1869 }, {  67,1869 }, {  68,1869 },
 {  69,1869 }, {  70,1869 }, {  71,1869 }, {  72,1869 }, {  73,1869 },
 {  74,1869 }, {  75,1869 }, {  76,1869 }, {  77,1869 }, {  78,1869 },
 {  79,1869 }, {  80,1869 }, {  81,1869 }, {  82,1869 }, {  83,1869 },
 {  84,1869 }, {  85,1869 }, {  86,1869 }, {  87,1869 }, {  88,1869 },
 {  89,1869 }, {  90,1869 }, {  91,1869 }, {  92,1869 }, {  93,1869 },
 {  94,1869 }, {  95,1869 }, {  96,1869 }, {  97,1869 }, {  98,1869 },
 {  99,1869 }, { 100,1869 }, { 101,1869 }, { 102,1869 }, { 103,1869 },
 { 104,1869 }, { 105,1869 }, { 106,1869 }, { 107,1869 }, { 108,1869 },
 { 109,1869 }, { 110,1869 }, { 111,1869 }, { 112,1869 }, { 113,1869 },

 { 114,1869 }, { 115,1869 }, { 116,1869 }, { 117,1869 }, { 118,1869 },
 { 119,1869 }, { 120,1869 }, { 121,1869 }, { 122,1869 }, { 123,1869 },
 { 124,1869 }, { 125,1747 }, { 126,1869 }, { 127,1869 }, { 128,1869 },
 { 129,1869 }, { 130,1869 }, { 131,1869 }, { 132,1869 }, { 133,1869 },
 { 134,1869 }, { 135,1869 }, { 136,1869 }, { 137,1869 }, { 138,1869 },
 { 139,1869 }, { 140,1869 }, { 141,1869 }, { 142,1869 }, { 143,1869 },
 { 144,1869 }, { 145,1869 }, { 146,1869 }, { 147,1869 }, { 148,1869 },
 { 149,1869 }, { 150,1869 }, { 151,1869 }, { 152,1869 }, { 153,1869 },
 { 154,1869 }, { 155,1869 }, { 156,1869 }, { 157,1869 }, { 158,1869 },
 { 159,1869 }, { 160,1869 }, { 161,1869 }, { 162,1869 }, { 163,1869 },

 { 164,1869 }, { 165,1869 }, { 166,1869 }, { 167,1869 }, { 168,1869 },
 { 169,1869 }, { 170,1869 }, { 171,1869 }, { 172,1869 }, { 173,1869 },
 { 174,1869 }, { 175,1869 }, { 176,1869 }, { 177,1869 }, { 178,1869 },
 { 179,1869 }, { 180,1869 }, { 181,1869 }, { 182,1869 }, { 183,1869 },
 { 184,1869 }, { 185,1869 }, { 186,1869 }, { 187,1869 }, { 188,1869 },
 { 189,1869 }, { 190,1869 }, { 191,1869 }, { 192,1869 }, { 193,1869 },
 { 194,1869 }, { 195,1869 }, { 196,1869 }, { 197,1869 }, { 198,1869 },
 { 199,1869 }, { 200,1869 }, { 201,1869 }, { 202,1869 }, { 203,1869 },
 { 204,1869 }, { 205,1869 }, { 206,1869 }, { 207,1869 }, { 208,1869 },
 { 209,1869 }, { 210,1869 }, { 211,1869 }, { 212,1869 }, { 213,1869 },

 { 214,1869 }, { 215,1869 }, { 216,1869 }, { 217,1869 }, { 218,1869 },
 { 219,1869 }, { 220,1869 }, { 221,1869 }, { 222,1869 }, { 223,1869 },
 { 224,1869 }, { 225,1869 }, { 226,1869 }, { 227,1869 }, { 228,1869 },
 { 229,1869 }, { 230,1869 }, { 231,1869 }, { 232,1869 }, { 233,1869 },
 { 234,1869 }, { 235,1869 }, { 236,1869 }, { 237,1869 }, { 238,1869 },
 { 239,1869 }, { 240,1869 }, { 241,1869 }, { 242,1869 }, { 243,1869 },
 { 244,1869 }, { 245,1869 }, { 246,1869 }, { 247,1869 }, { 248,1869 },
 { 249,1869 }, { 250,1869 }, { 251,1869 }, { 252,1869 }, { 253,1869 },
 { 254,1869 }, { 255,1869 }, { 256,1869 }, {   0,   0 }, {   0,3742 },
 {   0,   0 }, {   0,   0 }, {   0,3739 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,  55 },
 {   0,3731 }, {   0,   0 }, {   0,3729 }, {   0,  35 }, {   0,3727 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,  57 }, {   0,3719 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  48,1869 }, {  49,1869 }, {  50,1869 },
 {  51,1869 }, {  52,1869 }, {  53,1869 }, {  54,1869 }, {  55,1869 },

 {  56,1869 }, {  57,1869 }, {  35,1869 }, {  48,   0 }, {  49,   0 },
 {   0,   0 }, {  39,1950 }, {   0,   0 }, {   0,   0 }, {  65,1869 },
 {  66,1869 }, {  67,1869 }, {  68,1869 }, {  69,1869 }, {  70,1869 },
 {  48,   0 }, {  49,   0 }, {  50,   0 }, {  51,   0 }, {  52,   0 },
 {  53,   0 }, {  54,   0 }, {  55,   0 }, {  56,   0 }, {  57,   0 },
 {  78,2228 }, {   0,  56 }, {   0,3659 }, {   0,  57 }, {   0,3657 },
 {   0,  14 }, {   0,3655 }, {   0,  19 }, {   0,3653 }, {   0,   0 },
 {  78,2220 }, {   0,  30 }, {   0,3649 }, {   0,  31 }, {   0,3647 },
 {   0,   0 }, {  97,1869 }, {  98,1869 }, {  99,1869 }, { 100,1869 },
 { 101,1869 }, { 102,1869 }, {   0,  32 }, {   0,3638 }, {   0,  20 },

 {   0,3636 }, {   0,  41 }, {   0,3634 }, {   0,  13 }, {   0,3632 },
 {   0,  37 }, {   0,3630 }, { 110,2228 }, {   0,  55 }, {   0,3627 },
 {   0,  45 }, {   0,3625 }, {   0,   0 }, {  36,   0 }, {  35,1807 },
 {   0,   0 }, {   0,   0 }, { 110,2220 }, {  39,2249 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  48,   0 }, {  49,   0 }, {  50,   0 }, {  51,   0 }, {  52,   0 },
 {  53,   0 }, {  54,   0 }, {  55,   0 }, {  56,   0 }, {  57,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  65,   0 }, {  66,   0 }, {  67,   0 },
 {  68,   0 }, {  69,   0 }, {  70,   0 }, {  71,   0 }, {  72,   0 },

 {  73,   0 }, {  74,   0 }, {  75,   0 }, {  76,   0 }, {  77,   0 },
 {  78,   0 }, {  79,   0 }, {  80,   0 }, {  81,   0 }, {  82,   0 },
 {  83,   0 }, {  84,   0 }, {  85,   0 }, {  86,   0 }, {  87,   0 },
 {  88,   0 }, {  89,   0 }, {  90,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  95,   0 }, {   0,   0 }, {  97,   0 },
 {  98,   0 }, {  99,   0 }, { 100,   0 }, { 101,   0 }, { 102,   0 },
 { 103,   0 }, { 104,   0 }, { 105,   0 }, { 106,   0 }, { 107,   0 },
 { 108,   0 }, { 109,   0 }, { 110,   0 }, { 111,   0 }, { 112,   0 },
 { 113,   0 }, { 114,   0 }, { 115,   0 }, { 116,   0 }, { 117,   0 },
 { 118,   0 }, { 119,   0 }, { 120,   0 }, { 121,   0 }, { 122,   0 },

 {   0,   0 }, {   0,3535 }, {   1,   0 }, {   2,   0 }, {   3,   0 },
 {   4,   0 }, {   5,   0 }, {   6,   0 }, {   7,   0 }, {   8,   0 },
 {   9,   0 }, {  10,   0 }, {  11,   0 }, {  12,   0 }, {  13,   0 },
 {  14,   0 }, {  15,   0 }, {  16,   0 }, {  17,   0 }, {  18,   0 },
 {  19,   0 }, {  20,   0 }, {  21,   0 }, {  22,   0 }, {  23,   0 },
 {  24,   0 }, {  25,   0 }, {  26,   0 }, {  27,   0 }, {  28,   0 },
 {  29,   0 }, {  30,   0 }, {  31,   0 }, {  32,   0 }, {  33,   0 },
 {  34,   0 }, {  35,   0 }, {  36,   0 }, {  37,   0 }, {  38,   0 },
 {  39,-122 }, {  40,   0 }, {  41,   0 }, {  42,   0 }, {  43,   0 },
 {  44,   0 }, {  45,   0 }, {  46,   0 }, {  47,   0 }, {  48,   0 },

 {  49,   0 }, {  50,   0 }, {  51,   0 }, {  52,   0 }, {  53,   0 },
 {  54,   0 }, {  55,   0 }, {  56,   0 }, {  57,   0 }, {  58,   0 },
 {  59,   0 }, {  60,   0 }, {  61,   0 }, {  62,   0 }, {  63,   0 },
 {  64,   0 }, {  65,   0 }, {  66,   0 }, {  67,   0 }, {  68,   0 },
 {  69,   0 }, {  70,   0 }, {  71,   0 }, {  72,   0 }, {  73,   0 },
 {  74,   0 }, {  75,   0 }, {  76,   0 }, {  77,   0 }, {  78,   0 },
 {  79,   0 }, {  80,   0 }, {  81,   0 }, {  82,   0 }, {  83,   0 },
 {  84,   0 }, {  85,   0 }, {  86,   0 }, {  87,   0 }, {  88,   0 },
 {  89,   0 }, {  90,   0 }, {  91,   0 }, {  92,   0 }, {  93,   0 },
 {  94,   0 }, {  95,   0 }, {  96,   0 }, {  97,   0 }, {  98,   0 },

 {  99,   0 }, { 100,   0 }, { 101,   0 }, { 102,   0 }, { 103,   0 },
 { 104,   0 }, { 105,   0 }, { 106,   0 }, { 107,   0 }, { 108,   0 },
 { 109,   0 }, { 110,   0 }, { 111,   0 }, { 112,   0 }, { 113,   0 },
 { 114,   0 }, { 115,   0 }, { 116,   0 }, { 117,   0 }, { 118,   0 },
 { 119,   0 }, { 120,   0 }, { 121,   0 }, { 122,   0 }, { 123,   0 },
 { 124,   0 }, { 125,   0 }, { 126,   0 }, { 127,   0 }, { 128,   0 },
 { 129,   0 }, { 130,   0 }, { 131,   0 }, { 132,   0 }, { 133,   0 },
 { 134,   0 }, { 135,   0 }, { 136,   0 }, { 137,   0 }, { 138,   0 },
 { 139,   0 }, { 140,   0 }, { 141,   0 }, { 142,   0 }, { 143,   0 },
 { 144,   0 }, { 145,   0 }, { 146,   0 }, { 147,   0 }, { 148,   0 },

 { 149,   0 }, { 150,   0 }, { 151,   0 }, { 152,   0 }, { 153,   0 },
 { 154,   0 }, { 155,   0 }, { 156,   0 }, { 157,   0 }, { 158,   0 },
 { 159,   0 }, { 160,   0 }, { 161,   0 }, { 162,   0 }, { 163,   0 },
 { 164,   0 }, { 165,   0 }, { 166,   0 }, { 167,   0 }, { 168,   0 },
 { 169,   0 }, { 170,   0 }, { 171,   0 }, { 172,   0 }, { 173,   0 },
 { 174,   0 }, { 175,   0 }, { 176,   0 }, { 177,   0 }, { 178,   0 },
 { 179,   0 }, { 180,   0 }, { 181,   0 }, { 182,   0 }, { 183,   0 },
 { 184,   0 }, { 185,   0 }, { 186,   0 }, { 187,   0 }, { 188,   0 },
 { 189,   0 }, { 190,   0 }, { 191,   0 }, { 192,   0 }, { 193,   0 },
 { 194,   0 }, { 195,   0 }, { 196,   0 }, { 197,   0 }, { 198,   0 },

 { 199,   0 }, { 200,   0 }, { 201,   0 }, { 202,   0 }, { 203,   0 },
 { 204,   0 }, { 205,   0 }, { 206,   0 }, { 207,   0 }, { 208,   0 },
 { 209,   0 }, { 210,   0 }, { 211,   0 }, { 212,   0 }, { 213,   0 },
 { 214,   0 }, { 215,   0 }, { 216,   0 }, { 217,   0 }, { 218,   0 },
 { 219,   0 }, { 220,   0 }, { 221,   0 }, { 222,   0 }, { 223,   0 },
 { 224,   0 }, { 225,   0 }, { 226,   0 }, { 227,   0 }, { 228,   0 },
 { 229,   0 }, { 230,   0 }, { 231,   0 }, { 232,   0 }, { 233,   0 },
 { 234,   0 }, { 235,   0 }, { 236,   0 }, { 237,   0 }, { 238,   0 },
 { 239,   0 }, { 240,   0 }, { 241,   0 }, { 242,   0 }, { 243,   0 },
 { 244,   0 }, { 245,   0 }, { 246,   0 }, { 247,   0 }, { 248,   0 },

 { 249,   0 }, { 250,   0 }, { 251,   0 }, { 252,   0 }, { 253,   0 },
 { 254,   0 }, { 255,   0 }, { 256,   0 }, {   0,   0 }, {   0,3277 },
 {   0,  27 }, {   0,3275 }, {   0,  48 }, {   0,3273 }, {   0,  53 },
 {   0,3271 }, {   0,  49 }, {   0,3269 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,  26 }, {   0,3257 },
 {   0,   0 }, {   0,   0 }, {   0,3254 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,3247 },
 {   0,  15 }, {   0,3245 }, {   0,  36 }, {   0,3243 }, {   0,  10 },
 {   0,3241 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  48,2127 }, {  49,2127 }, {  50,2127 },
 {  51,2127 }, {  52,2127 }, {  53,2127 }, {  54,2127 }, {  55,2127 },
 {  56,2127 }, {  57,2127 }, {   0,  55 }, {   0,3218 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  61,1768 }, {   0,   0 }, {  65,2127 },
 {  66,2127 }, {  67,2127 }, {  68,2127 }, {  69,2127 }, {  70,2127 },
 {  48,2127 }, {  49,2127 }, {  50,2127 }, {  51,2127 }, {  52,2127 },
 {  53,2127 }, {  54,2127 }, {  55,2127 }, {  56,2127 }, {  57,2127 },
 {  61,1752 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  35, -59 }, {  59,   0 },
 {   0,   0 }, {  97,2127 }, {  98,2127 }, {  99,2127 }, { 100,2127 },
 { 101,2127 }, { 102,2127 }, {  73,2483 }, {   0,   0 }, {  46, -36 },
 {   0,   0 }, {  48,2128 }, {  49,2128 }, {  50,2187 }, {  51,2187 },
 {  52,2187 }, {  53,2187 }, {  54,2187 }, {  55,2187 }, {  56,2187 },
 {  57,2187 }, {   0,  55 }, {   0,3159 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   9 }, {   0,3154 }, {  65, 118 }, {  66, 177 },
 {  67, 118 }, {  68, 118 }, {  69, 237 }, {  70, 118 }, {   0,   0 },
 {  72,-409 }, {   9,   0 }, {  10,   0 }, {   0,   0 }, { 105,2483 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  35,-118 }, {   0,   0 }, {  32,   0 },
 {  97, 118 }, {  98, 177 }, {  99, 118 }, { 100, 118 }, { 101, 237 },
 { 102, 118 }, {   0,   0 }, { 104,-409 }, {  46, -95 }, {   0,   0 },
 {  48,2128 }, {  49,2128 }, {  50,2128 }, {  51,2128 }, {  52,2128 },
 {  53,2128 }, {  54,2128 }, {  55,2128 }, {  56,2128 }, {  57,2128 },
 {   0,   0 }, {   0,3100 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  65,  59 }, {  66,  59 }, {  67,  59 },
 {  68,  59 }, {  69, 178 }, {  70,  59 }, {   0,   0 }, {  72,-468 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  97,  59 },
 {  98,  59 }, {  99,  59 }, { 100,  59 }, { 101, 178 }, { 102,  59 },
 {   0,   0 }, { 104,-468 }, {   0,   0 }, {   0,   0 }, {  48,   0 },
 {  49,   0 }, {  50,   0 }, {  51,   0 }, {  52,   0 }, {  53,   0 },
 {  54,   0 }, {  55,   0 }, {  56,   0 }, {  57,   0 }, {   0,  55 },
 {   0,3041 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {  65,   0 }, {  66,   0 }, {  67,   0 }, {  68,   0 },
 {  69,   0 }, {  70,   0 }, {   0,   0 }, {  72,-527 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  97,   0 }, {  98,   0 },
 {  99,   0 }, { 100,   0 }, { 101,   0 }, { 102,   0 }, {   0,   0 },
 { 104,-527 }, {   0,   0 }, {   0,   0 }, {  48, -59 }, {  49, -59 },
 {  50, -59 }, {  51, -59 }, {  52, -59 }, {  53, -59 }, {  54, -59 },

 {  55, -59 }, {  56, -59 }, {  57, -59 }, {   0,   0 }, {   0,   0 },
 {   0,2981 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  65, -59 }, {  66, -59 }, {  67, -59 }, {  68, -59 }, {  69, -59 },
 {  70, -59 }, {   0,   0 }, {  72,-586 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,2956 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  97, -59 }, {  98, -59 }, {  99, -59 },
 { 100, -59 }, { 101, -59 }, { 102, -59 }, {  43,1975 }, { 104,-586 },

 {  45,1975 }, {   0,   0 }, {   0,   0 }, {  48,2009 }, {  49,2009 },
 {  50,2009 }, {  51,2009 }, {  52,2009 }, {  53,2009 }, {  54,2009 },
 {  55,2009 }, {  56,2009 }, {  57,2009 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  65,-119 }, {  66,-119 }, {  67,-119 }, {  68,-119 }, {  69,-119 },
 {  70,-119 }, {   0,   0 }, {  72,-646 }, {  48,2009 }, {  49,2009 },
 {  50,2009 }, {  51,2009 }, {  52,2009 }, {  53,2009 }, {  54,2009 },
 {  55,2009 }, {  56,2009 }, {  57,2009 }, {   0,  56 }, {   0,2897 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  65,2009 }, {  66,2009 }, {  67,2009 }, {  68,2009 }, {  69,2009 },

 {  70,2009 }, {   0,   0 }, {  97,-119 }, {  98,-119 }, {  99,-119 },
 { 100,-119 }, { 101,-119 }, { 102,-119 }, {   0,   0 }, { 104,-646 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  36,-762 }, {   0,   0 }, {  97,2009 }, {  98,2009 }, {  99,2009 },
 { 100,2009 }, { 101,2009 }, { 102,2009 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  48,-762 }, {  49,-762 }, {  50,-762 },
 {  51,-762 }, {  52,-762 }, {  53,-762 }, {  54,-762 }, {  55,-762 },
 {  56,-762 }, {  57,-762 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  65,-762 },
 {  66,-762 }, {  67,-762 }, {  68,-762 }, {  69,2009 }, {  70,-762 },
 {  71,-762 }, {  72,-762 }, {  73,-762 }, {  74,-762 }, {  75,-762 },
 {  76,-762 }, {  77,-762 }, {  78,-762 }, {  79,-762 }, {  80,-762 },
 {  81,-762 }, {  82,-762 }, {  83,-762 }, {  84,-762 }, {  85,-762 },
 {  86,-762 }, {  87,-762 }, {  88,-762 }, {  89,-762 }, {  90,-762 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  95,-762 },
 {   0,   0 }, {  97,-762 }, {  98,-762 }, {  99,-762 }, { 100,-762 },
 { 101,2009 }, { 102,-762 }, { 103,-762 }, { 104,-762 }, { 105,-762 },
 { 106,-762 }, { 107,-762 }, { 108,-762 }, { 109,-762 }, { 110,-762 },

 { 111,-762 }, { 112,-762 }, { 113,-762 }, { 114,-762 }, { 115,-762 },
 { 116,-762 }, { 117,-762 }, { 118,-762 }, { 119,-762 }, { 120,-762 },
 { 121,-762 }, { 122,-762 }, {   0,  10 }, {   0,2773 }, {   1,   0 },
 {   2,   0 }, {   3,   0 }, {   4,   0 }, {   5,   0 }, {   6,   0 },
 {   7,   0 }, {   8,   0 }, {   9,   0 }, {   0,   0 }, {  11,   0 },
 {  12,   0 }, {  13,   0 }, {  14,   0 }, {  15,   0 }, {  16,   0 },
 {  17,   0 }, {  18,   0 }, {  19,   0 }, {  20,   0 }, {  21,   0 },
 {  22,   0 }, {  23,   0 }, {  24,   0 }, {  25,   0 }, {  26,   0 },
 {  27,   0 }, {  28,   0 }, {  29,   0 }, {  30,   0 }, {  31,   0 },
 {  32,   0 }, {  33,   0 }, {  34,   0 }, {  35,   0 }, {  36,   0 },

 {  37,   0 }, {  38,   0 }, {  39,   0 }, {  40,   0 }, {  41,   0 },
 {  42,   0 }, {  43,   0 }, {  44,   0 }, {  45,   0 }, {  46,   0 },
 {  47,   0 }, {  48,   0 }, {  49,   0 }, {  50,   0 }, {  51,   0 },
 {  52,   0 }, {  53,   0 }, {  54,   0 }, {  55,   0 }, {  56,   0 },
 {  57,   0 }, {  58,   0 }, {  59,-468 }, {  60,   0 }, {  61,   0 },
 {  62,   0 }, {  63,   0 }, {  64,   0 }, {  65,   0 }, {  66,   0 },
 {  67,   0 }, {  68,   0 }, {  69,   0 }, {  70,   0 }, {  71,   0 },
 {  72,   0 }, {  73,   0 }, {  74,   0 }, {  75,   0 }, {  76,   0 },
 {  77,   0 }, {  78,   0 }, {  79,   0 }, {  80,   0 }, {  81,   0 },
 {  82,   0 }, {  83,   0 }, {  84,   0 }, {  85,   0 }, {  86,   0 },

 {  87,   0 }, {  88,   0 }, {  89,   0 }, {  90,   0 }, {  91,   0 },
 {  92,   0 }, {  93,   0 }, {  94,   0 }, {  95,   0 }, {  96,   0 },
 {  97,   0 }, {  98,   0 }, {  99,   0 }, { 100,   0 }, { 101,   0 },
 { 102,   0 }, { 103,   0 }, { 104,   0 }, { 105,   0 }, { 106,   0 },
 { 107,   0 }, { 108,   0 }, { 109,   0 }, { 110,   0 }, { 111,   0 },
 { 112,   0 }, { 113,   0 }, { 114,   0 }, { 115,   0 }, { 116,   0 },
 { 117,   0 }, { 118,   0 }, { 119,   0 }, { 120,   0 }, { 121,   0 },
 { 122,   0 }, { 123,   0 }, { 124,   0 }, { 125,   0 }, { 126,   0 },
 { 127,   0 }, { 128,   0 }, { 129,   0 }, { 130,   0 }, { 131,   0 },
 { 132,   0 }, { 133,   0 }, { 134,   0 }, { 135,   0 }, { 136,   0 },

 { 137,   0 }, { 138,   0 }, { 139,   0 }, { 140,   0 }, { 141,   0 },
 { 142,   0 }, { 143,   0 }, { 144,   0 }, { 145,   0 }, { 146,   0 },
 { 147,   0 }, { 148,   0 }, { 149,   0 }, { 150,   0 }, { 151,   0 },
 { 152,   0 }, { 153,   0 }, { 154,   0 }, { 155,   0 }, { 156,   0 },
 { 157,   0 }, { 158,   0 }, { 159,   0 }, { 160,   0 }, { 161,   0 },
 { 162,   0 }, { 163,   0 }, { 164,   0 }, { 165,   0 }, { 166,   0 },
 { 167,   0 }, { 168,   0 }, { 169,   0 }, { 170,   0 }, { 171,   0 },
 { 172,   0 }, { 173,   0 }, { 174,   0 }, { 175,   0 }, { 176,   0 },
 { 177,   0 }, { 178,   0 }, { 179,   0 }, { 180,   0 }, { 181,   0 },
 { 182,   0 }, { 183,   0 }, { 184,   0 }, { 185,   0 }, { 186,   0 },

 { 187,   0 }, { 188,   0 }, { 189,   0 }, { 190,   0 }, { 191,   0 },
 { 192,   0 }, { 193,   0 }, { 194,   0 }, { 195,   0 }, { 196,   0 },
 { 197,   0 }, { 198,   0 }, { 199,   0 }, { 200,   0 }, { 201,   0 },
 { 202,   0 }, { 203,   0 }, { 204,   0 }, { 205,   0 }, { 206,   0 },
 { 207,   0 }, { 208,   0 }, { 209,   0 }, { 210,   0 }, { 211,   0 },
 { 212,   0 }, { 213,   0 }, { 214,   0 }, { 215,   0 }, { 216,   0 },
 { 217,   0 }, { 218,   0 }, { 219,   0 }, { 220,   0 }, { 221,   0 },
 { 222,   0 }, { 223,   0 }, { 224,   0 }, { 225,   0 }, { 226,   0 },
 { 227,   0 }, { 228,   0 }, { 229,   0 }, { 230,   0 }, { 231,   0 },
 { 232,   0 }, { 233,   0 }, { 234,   0 }, { 235,   0 }, { 236,   0 },

 { 237,   0 }, { 238,   0 }, { 239,   0 }, { 240,   0 }, { 241,   0 },
 { 242,   0 }, { 243,   0 }, { 244,   0 }, { 245,   0 }, { 246,   0 },
 { 247,   0 }, { 248,   0 }, { 249,   0 }, { 250,   0 }, { 251,   0 },
 { 252,   0 }, { 253,   0 }, { 254,   0 }, { 255,   0 }, { 256,   0 },
 {   0,   9 }, {   0,2515 }, {   1,-258 }, {   2,-258 }, {   3,-258 },
 {   4,-258 }, {   5,-258 }, {   6,-258 }, {   7,-258 }, {   8,-258 },
 {   9,   0 }, {  10,-639 }, {  11,-258 }, {  12,-258 }, {  13,-258 },
 {  14,-258 }, {  15,-258 }, {  16,-258 }, {  17,-258 }, {  18,-258 },
 {  19,-258 }, {  20,-258 }, {  21,-258 }, {  22,-258 }, {  23,-258 },
 {  24,-258 }, {  25,-258 }, {  26,-258 }, {  27,-258 }, {  28,-258 },

 {  29,-258 }, {  30,-258 }, {  31,-258 }, {  32,   0 }, {  33,-258 },
 {  34,-258 }, {  35,-258 }, {  36,-258 }, {  37,-258 }, {  38,-258 },
 {  39,-258 }, {  40,-258 }, {  41,-258 }, {  42,-258 }, {  43,-258 },
 {  44,-258 }, {  45,-258 }, {  46,-258 }, {  47,-258 }, {  48,-258 },
 {  49,-258 }, {  50,-258 }, {  51,-258 }, {  52,-258 }, {  53,-258 },
 {  54,-258 }, {  55,-258 }, {  56,-258 }, {  57,-258 }, {  58,-258 },
 {  59,-726 }, {  60,-258 }, {  61,-258 }, {  62,-258 }, {  63,-258 },
 {  64,-258 }, {  65,-258 }, {  66,-258 }, {  67,-258 }, {  68,-258 },
 {  69,-258 }, {  70,-258 }, {  71,-258 }, {  72,-258 }, {  73,-258 },
 {  74,-258 }, {  75,-258 }, {  76,-258 }, {  77,-258 }, {  78,-258 },

 {  79,-258 }, {  80,-258 }, {  81,-258 }, {  82,-258 }, {  83,-258 },
 {  84,-258 }, {  85,-258 }, {  86,-258 }, {  87,-258 }, {  88,-258 },
 {  89,-258 }, {  90,-258 }, {  91,-258 }, {  92,-258 }, {  93,-258 },
 {  94,-258 }, {  95,-258 }, {  96,-258 }, {  97,-258 }, {  98,-258 },
 {  99,-258 }, { 100,-258 }, { 101,-258 }, { 102,-258 }, { 103,-258 },
 { 104,-258 }, { 105,-258 }, { 106,-258 }, { 107,-258 }, { 108,-258 },
 { 109,-258 }, { 110,-258 }, { 111,-258 }, { 112,-258 }, { 113,-258 },
 { 114,-258 }, { 115,-258 }, { 116,-258 }, { 117,-258 }, { 118,-258 },
 { 119,-258 }, { 120,-258 }, { 121,-258 }, { 122,-258 }, { 123,-258 },
 { 124,-258 }, { 125,-258 }, { 126,-258 }, { 127,-258 }, { 128,-258 },

 { 129,-258 }, { 130,-258 }, { 131,-258 }, { 132,-258 }, { 133,-258 },
 { 134,-258 }, { 135,-258 }, { 136,-258 }, { 137,-258 }, { 138,-258 },
 { 139,-258 }, { 140,-258 }, { 141,-258 }, { 142,-258 }, { 143,-258 },
 { 144,-258 }, { 145,-258 }, { 146,-258 }, { 147,-258 }, { 148,-258 },
 { 149,-258 }, { 150,-258 }, { 151,-258 }, { 152,-258 }, { 153,-258 },
 { 154,-258 }, { 155,-258 }, { 156,-258 }, { 157,-258 }, { 158,-258 },
 { 159,-258 }, { 160,-258 }, { 161,-258 }, { 162,-258 }, { 163,-258 },
 { 164,-258 }, { 165,-258 }, { 166,-258 }, { 167,-258 }, { 168,-258 },
 { 169,-258 }, { 170,-258 }, { 171,-258 }, { 172,-258 }, { 173,-258 },
 { 174,-258 }, { 175,-258 }, { 176,-258 }, { 177,-258 }, { 178,-258 },

 { 179,-258 }, { 180,-258 }, { 181,-258 }, { 182,-258 }, { 183,-258 },
 { 184,-258 }, { 185,-258 }, { 186,-258 }, { 187,-258 }, { 188,-258 },
 { 189,-258 }, { 190,-258 }, { 191,-258 }, { 192,-258 }, { 193,-258 },
 { 194,-258 }, { 195,-258 }, { 196,-258 }, { 197,-258 }, { 198,-258 },
 { 199,-258 }, { 200,-258 }, { 201,-258 }, { 202,-258 }, { 203,-258 },
 { 204,-258 }, { 205,-258 }, { 206,-258 }, { 207,-258 }, { 208,-258 },
 { 209,-258 }, { 210,-258 }, { 211,-258 }, { 212,-258 }, { 213,-258 },
 { 214,-258 }, { 215,-258 }, { 216,-258 }, { 217,-258 }, { 218,-258 },
 { 219,-258 }, { 220,-258 }, { 221,-258 }, { 222,-258 }, { 223,-258 },
 { 224,-258 }, { 225,-258 }, { 226,-258 }, { 227,-258 }, { 228,-258 },

 { 229,-258 }, { 230,-258 }, { 231,-258 }, { 232,-258 }, { 233,-258 },
 { 234,-258 }, { 235,-258 }, { 236,-258 }, { 237,-258 }, { 238,-258 },
 { 239,-258 }, { 240,-258 }, { 241,-258 }, { 242,-258 }, { 243,-258 },
 { 244,-258 }, { 245,-258 }, { 246,-258 }, { 247,-258 }, { 248,-258 },
 { 249,-258 }, { 250,-258 }, { 251,-258 }, { 252,-258 }, { 253,-258 },
 { 254,-258 }, { 255,-258 }, { 256,-258 }, {   0,   4 }, {   0,2257 },
 {   0,   6 }, {   0,2255 }, {   0,   5 }, {   0,2253 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   9,   0 }, {  10,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  32,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  44,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  48,   0 },
 {  49,   0 }, {  50,   0 }, {  51,   0 }, {  52,   0 }, {  53,   0 },
 {  54,   0 }, {  55,   0 }, {  56,   0 }, {  57,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  65,   0 }, {  66,   0 }, {  67,   0 }, {  68,   0 },

 {  69,   0 }, {  70,   0 }, {  71,   0 }, {  72,   0 }, {  73,   0 },
 {  74,   0 }, {  75,   0 }, {  76,   0 }, {  77,   0 }, {  78,   0 },
 {  79,   0 }, {  80,   0 }, {  81,   0 }, {  82,   0 }, {  83,   0 },
 {  84,   0 }, {  85,   0 }, {  86,   0 }, {  87,   0 }, {  88,   0 },
 {  89,   0 }, {  90,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  95,   0 }, {   0,   0 }, {  97,   0 }, {  98,   0 },
 {  99,   0 }, { 100,   0 }, { 101,   0 }, { 102,   0 }, { 103,   0 },
 { 104,   0 }, { 105,   0 }, { 106,   0 }, { 107,   0 }, { 108,   0 },
 { 109,   0 }, { 110,   0 }, { 111,   0 }, { 112,   0 }, { 113,   0 },
 { 114,   0 }, { 115,   0 }, { 116,   0 }, { 117,   0 }, { 118,   0 },

 { 119,   0 }, { 120,   0 }, { 121,   0 }, { 122,   0 }, {   0,   0 },
 {   0,2131 }, {   1,   0 }, {   2,   0 }, {   3,   0 }, {   4,   0 },
 {   5,   0 }, {   6,   0 }, {   7,   0 }, {   8,   0 }, {   9,   0 },
 {  10,   0 }, {  11,   0 }, {  12,   0 }, {  13,   0 }, {  14,   0 },
 {  15,   0 }, {  16,   0 }, {  17,   0 }, {  18,   0 }, {  19,   0 },
 {  20,   0 }, {  21,   0 }, {  22,   0 }, {  23,   0 }, {  24,   0 },
 {  25,   0 }, {  26,   0 }, {  27,   0 }, {  28,   0 }, {  29,   0 },
 {  30,   0 }, {  31,   0 }, {  32,   0 }, {  33,   0 }, {  34,   0 },
 {  35,   0 }, {  36,   0 }, {  37,   0 }, {  38,   0 }, {  39,   0 },
 {  40,   0 }, {  41,   0 }, {  42,   0 }, {  43,   0 }, {  44,   0 },

 {  45,   0 }, {  46,   0 }, {  47,   0 }, {  48,   0 }, {  49,   0 },
 {  50,   0 }, {  51,   0 }, {  52,   0 }, {  53,   0 }, {  54,   0 },
 {  55,   0 }, {  56,   0 }, {  57,   0 }, {  58,   0 }, {  59,   0 },
 {  60,   0 }, {  61,   0 }, {  62,   0 }, {  63,   0 }, {  64,   0 },
 {  65,   0 }, {  66,   0 }, {  67,   0 }, {  68,   0 }, {  69,   0 },
 {  70,   0 }, {  71,   0 }, {  72,   0 }, {  73,   0 }, {  74,   0 },
 {  75,   0 }, {  76,   0 }, {  77,   0 }, {  78,   0 }, {  79,   0 },
 {  80,   0 }, {  81,   0 }, {  82,   0 }, {  83,   0 }, {  84,   0 },
 {  85,   0 }, {  86,   0 }, {  87,   0 }, {  88,   0 }, {  89,   0 },
 {  90,   0 }, {  91,   0 }, {  92,   0 }, {  93,   0 }, {  94,   0 },

 {  95,   0 }, {  96,   0 }, {  97,   0 }, {  98,   0 }, {  99,   0 },
 { 100,   0 }, { 101,   0 }, { 102,   0 }, { 103,   0 }, { 104,   0 },
 { 105,   0 }, { 106,   0 }, { 107,   0 }, { 108,   0 }, { 109,   0 },
 { 110,   0 }, { 111,   0 }, { 112,   0 }, { 113,   0 }, { 114,   0 },
 { 115,   0 }, { 116,   0 }, { 117,   0 }, { 118,   0 }, { 119,   0 },
 { 120,   0 }, { 121,   0 }, { 122,   0 }, { 123,   0 }, { 124,   0 },
 { 125,-122 }, { 126,   0 }, { 127,   0 }, { 128,   0 }, { 129,   0 },
 { 130,   0 }, { 131,   0 }, { 132,   0 }, { 133,   0 }, { 134,   0 },
 { 135,   0 }, { 136,   0 }, { 137,   0 }, { 138,   0 }, { 139,   0 },
 { 140,   0 }, { 141,   0 }, { 142,   0 }, { 143,   0 }, { 144,   0 },

 { 145,   0 }, { 146,   0 }, { 147,   0 }, { 148,   0 }, { 149,   0 },
 { 150,   0 }, { 151,   0 }, { 152,   0 }, { 153,   0 }, { 154,   0 },
 { 155,   0 }, { 156,   0 }, { 157,   0 }, { 158,   0 }, { 159,   0 },
 { 160,   0 }, { 161,   0 }, { 162,   0 }, { 163,   0 }, { 164,   0 },
 { 165,   0 }, { 166,   0 }, { 167,   0 }, { 168,   0 }, { 169,   0 },
 { 170,   0 }, { 171,   0 }, { 172,   0 }, { 173,   0 }, { 174,   0 },
 { 175,   0 }, { 176,   0 }, { 177,   0 }, { 178,   0 }, { 179,   0 },
 { 180,   0 }, { 181,   0 }, { 182,   0 }, { 183,   0 }, { 184,   0 },
 { 185,   0 }, { 186,   0 }, { 187,   0 }, { 188,   0 }, { 189,   0 },
 { 190,   0 }, { 191,   0 }, { 192,   0 }, { 193,   0 }, { 194,   0 },

 { 195,   0 }, { 196,   0 }, { 197,   0 }, { 198,   0 }, { 199,   0 },
 { 200,   0 }, { 201,   0 }, { 202,   0 }, { 203,   0 }, { 204,   0 },
 { 205,   0 }, { 206,   0 }, { 207,   0 }, { 208,   0 }, { 209,   0 },
 { 210,   0 }, { 211,   0 }, { 212,   0 }, { 213,   0 }, { 214,   0 },
 { 215,   0 }, { 216,   0 }, { 217,   0 }, { 218,   0 }, { 219,   0 },
 { 220,   0 }, { 221,   0 }, { 222,   0 }, { 223,   0 }, { 224,   0 },
 { 225,   0 }, { 226,   0 }, { 227,   0 }, { 228,   0 }, { 229,   0 },
 { 230,   0 }, { 231,   0 }, { 232,   0 }, { 233,   0 }, { 234,   0 },
 { 235,   0 }, { 236,   0 }, { 237,   0 }, { 238,   0 }, { 239,   0 },
 { 240,   0 }, { 241,   0 }, { 242,   0 }, { 243,   0 }, { 244,   0 },

 { 245,   0 }, { 246,   0 }, { 247,   0 }, { 248,   0 }, { 249,   0 },
 { 250,   0 }, { 251,   0 }, { 252,   0 }, { 253,   0 }, { 254,   0 },
 { 255,   0 }, { 256,   0 }, {   0,  57 }, {   0,1873 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,1850 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  35,  23 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {  39, 104 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  48,   0 }, {  49,   0 }, {  50,   0 }, {  51,   0 },
 {  52,   0 }, {  53,   0 }, {  54,   0 }, {  55,   0 }, {  56,   0 },
 {  57,   0 }, {   0,   0 }, {  36,-1892 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  65,   0 }, {  66,   0 },
 {  67,   0 }, {  68,   0 }, {  69,   0 }, {  70,   0 }, {  48,-1869 },
 {  49,-1869 }, {  50,-1869 }, {  51,-1869 }, {  52,-1869 }, {  53,-1869 },
 {  54,-1869 }, {  55,-1869 }, {  56,-1869 }, {  57,-1869 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  97,   0 }, {  98,   0 }, {  99,   0 }, { 100,   0 }, { 101,   0 },
 { 102,   0 }, {   0,   0 }, {   0,1769 }, {   1,-1766 }, {   2,-1766 },
 {   3,-1766 }, {   4,-1766 }, {   5,-1766 }, {   6,-1766 }, {   7,-1766 },
 {   8,-1766 }, {   9,-1766 }, {  10,-1766 }, {  11,-1766 }, {  12,-1766 },
 {  13,-1766 }, {  14,-1766 }, {  15,-1766 }, {  16,-1766 }, {  17,-1766 },
 {  18,-1766 }, {  19,-1766 }, {  20,-1766 }, {  21,-1766 }, {  22,-1766 },
 {  23,-1766 }, {  24,-1766 }, {  25,-1766 }, {  26,-1766 }, {  27,-1766 },
 {  28,-1766 }, {  29,-1766 }, {  30,-1766 }, {  31,-1766 }, {  32,-1766 },

 {  33,-1766 }, {  34,-1766 }, {  35,-1766 }, {  36,-1766 }, {  37,-1766 },
 {  38,-1766 }, {  39,-1888 }, {  40,-1766 }, {  41,-1766 }, {  42,-1766 },
 {  43,-1766 }, {  44,-1766 }, {  45,-1766 }, {  46,-1766 }, {  47,-1766 },
 {  48,-1766 }, {  49,-1766 }, {  50,-1766 }, {  51,-1766 }, {  52,-1766 },
 {  53,-1766 }, {  54,-1766 }, {  55,-1766 }, {  56,-1766 }, {  57,-1766 },
 {  58,-1766 }, {  59,-1766 }, {  60,-1766 }, {  61,-1766 }, {  62,-1766 },
 {  63,-1766 }, {  64,-1766 }, {  65,-1766 }, {  66,-1766 }, {  67,-1766 },
 {  68,-1766 }, {  69,-1766 }, {  70,-1766 }, {  71,-1766 }, {  72,-1766 },
 {  73,-1766 }, {  74,-1766 }, {  75,-1766 }, {  76,-1766 }, {  77,-1766 },
 {  78,-1766 }, {  79,-1766 }, {  80,-1766 }, {  81,-1766 }, {  82,-1766 },

 {  83,-1766 }, {  84,-1766 }, {  85,-1766 }, {  86,-1766 }, {  87,-1766 },
 {  88,-1766 }, {  89,-1766 }, {  90,-1766 }, {  91,-1766 }, {  92,-1766 },
 {  93,-1766 }, {  94,-1766 }, {  95,-1766 }, {  96,-1766 }, {  97,-1766 },
 {  98,-1766 }, {  99,-1766 }, { 100,-1766 }, { 101,-1766 }, { 102,-1766 },
 { 103,-1766 }, { 104,-1766 }, { 105,-1766 }, { 106,-1766 }, { 107,-1766 },
 { 108,-1766 }, { 109,-1766 }, { 110,-1766 }, { 111,-1766 }, { 112,-1766 },
 { 113,-1766 }, { 114,-1766 }, { 115,-1766 }, { 116,-1766 }, { 117,-1766 },
 { 118,-1766 }, { 119,-1766 }, { 120,-1766 }, { 121,-1766 }, { 122,-1766 },
 { 123,-1766 }, { 124,-1766 }, { 125,-1766 }, { 126,-1766 }, { 127,-1766 },
 { 128,-1766 }, { 129,-1766 }, { 130,-1766 }, { 131,-1766 }, { 132,-1766 },

 { 133,-1766 }, { 134,-1766 }, { 135,-1766 }, { 136,-1766 }, { 137,-1766 },
 { 138,-1766 }, { 139,-1766 }, { 140,-1766 }, { 141,-1766 }, { 142,-1766 },
 { 143,-1766 }, { 144,-1766 }, { 145,-1766 }, { 146,-1766 }, { 147,-1766 },
 { 148,-1766 }, { 149,-1766 }, { 150,-1766 }, { 151,-1766 }, { 152,-1766 },
 { 153,-1766 }, { 154,-1766 }, { 155,-1766 }, { 156,-1766 }, { 157,-1766 },
 { 158,-1766 }, { 159,-1766 }, { 160,-1766 }, { 161,-1766 }, { 162,-1766 },
 { 163,-1766 }, { 164,-1766 }, { 165,-1766 }, { 166,-1766 }, { 167,-1766 },
 { 168,-1766 }, { 169,-1766 }, { 170,-1766 }, { 171,-1766 }, { 172,-1766 },
 { 173,-1766 }, { 174,-1766 }, { 175,-1766 }, { 176,-1766 }, { 177,-1766 },
 { 178,-1766 }, { 179,-1766 }, { 180,-1766 }, { 181,-1766 }, { 182,-1766 },

 { 183,-1766 }, { 184,-1766 }, { 185,-1766 }, { 186,-1766 }, { 187,-1766 },
 { 188,-1766 }, { 189,-1766 }, { 190,-1766 }, { 191,-1766 }, { 192,-1766 },
 { 193,-1766 }, { 194,-1766 }, { 195,-1766 }, { 196,-1766 }, { 197,-1766 },
 { 198,-1766 }, { 199,-1766 }, { 200,-1766 }, { 201,-1766 }, { 202,-1766 },
 { 203,-1766 }, { 204,-1766 }, { 205,-1766 }, { 206,-1766 }, { 207,-1766 },
 { 208,-1766 }, { 209,-1766 }, { 210,-1766 }, { 211,-1766 }, { 212,-1766 },
 { 213,-1766 }, { 214,-1766 }, { 215,-1766 }, { 216,-1766 }, { 217,-1766 },
 { 218,-1766 }, { 219,-1766 }, { 220,-1766 }, { 221,-1766 }, { 222,-1766 },
 { 223,-1766 }, { 224,-1766 }, { 225,-1766 }, { 226,-1766 }, { 227,-1766 },
 { 228,-1766 }, { 229,-1766 }, { 230,-1766 }, { 231,-1766 }, { 232,-1766 },

 { 233,-1766 }, { 234,-1766 }, { 235,-1766 }, { 236,-1766 }, { 237,-1766 },
 { 238,-1766 }, { 239,-1766 }, { 240,-1766 }, { 241,-1766 }, { 242,-1766 },
 { 243,-1766 }, { 244,-1766 }, { 245,-1766 }, { 246,-1766 }, { 247,-1766 },
 { 248,-1766 }, { 249,-1766 }, { 250,-1766 }, { 251,-1766 }, { 252,-1766 },
 { 253,-1766 }, { 254,-1766 }, { 255,-1766 }, { 256,-1766 }, {   0,   0 },
 {   0,1511 }, {   0,   0 }, {   0,1509 }, {   0,  34 }, {   0,1507 },
 {   0,  33 }, {   0,1505 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  67, 373 }, {   0,   0 }, {  67, 373 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  99, 373 },
 {   0,   0 }, {  99, 373 }, {   0,   0 }, {   0,1408 }, {   1,-2127 },
 {   2,-2127 }, {   3,-2127 }, {   4,-2127 }, {   5,-2127 }, {   6,-2127 },
 {   7,-2127 }, {   8,-2127 }, {   9,-2127 }, {  10,-2127 }, {  11,-2127 },
 {  12,-2127 }, {  13,-2127 }, {  14,-2127 }, {  15,-2127 }, {  16,-2127 },
 {  17,-2127 }, {  18,-2127 }, {  19,-2127 }, {  20,-2127 }, {  21,-2127 },

 {  22,-2127 }, {  23,-2127 }, {  24,-2127 }, {  25,-2127 }, {  26,-2127 },
 {  27,-2127 }, {  28,-2127 }, {  29,-2127 }, {  30,-2127 }, {  31,-2127 },
 {  32,-2127 }, {  33,-2127 }, {  34,-2127 }, {  35,-2127 }, {  36,-2127 },
 {  37,-2127 }, {  38,-2127 }, {  39,-2249 }, {  40,-2127 }, {  41,-2127 },
 {  42,-2127 }, {  43,-2127 }, {  44,-2127 }, {  45,-2127 }, {  46,-2127 },
 {  47,-2127 }, {  48,-2127 }, {  49,-2127 }, {  50,-2127 }, {  51,-2127 },
 {  52,-2127 }, {  53,-2127 }, {  54,-2127 }, {  55,-2127 }, {  56,-2127 },
 {  57,-2127 }, {  58,-2127 }, {  59,-2127 }, {  60,-2127 }, {  61,-2127 },
 {  62,-2127 }, {  63,-2127 }, {  64,-2127 }, {  65,-2127 }, {  66,-2127 },
 {  67,-2127 }, {  68,-2127 }, {  69,-2127 }, {  70,-2127 }, {  71,-2127 },

 {  72,-2127 }, {  73,-2127 }, {  74,-2127 }, {  75,-2127 }, {  76,-2127 },
 {  77,-2127 }, {  78,-2127 }, {  79,-2127 }, {  80,-2127 }, {  81,-2127 },
 {  82,-2127 }, {  83,-2127 }, {  84,-2127 }, {  85,-2127 }, {  86,-2127 },
 {  87,-2127 }, {  88,-2127 }, {  89,-2127 }, {  90,-2127 }, {  91,-2127 },
 {  92,-2127 }, {  93,-2127 }, {  94,-2127 }, {  95,-2127 }, {  96,-2127 },
 {  97,-2127 }, {  98,-2127 }, {  99,-2127 }, { 100,-2127 }, { 101,-2127 },
 { 102,-2127 }, { 103,-2127 }, { 104,-2127 }, { 105,-2127 }, { 106,-2127 },
 { 107,-2127 }, { 108,-2127 }, { 109,-2127 }, { 110,-2127 }, { 111,-2127 },
 { 112,-2127 }, { 113,-2127 }, { 114,-2127 }, { 115,-2127 }, { 116,-2127 },
 { 117,-2127 }, { 118,-2127 }, { 119,-2127 }, { 120,-2127 }, { 121,-2127 },

 { 122,-2127 }, { 123,-2127 }, { 124,-2127 }, { 125,-2127 }, { 126,-2127 },
 { 127,-2127 }, { 128,-2127 }, { 129,-2127 }, { 130,-2127 }, { 131,-2127 },
 { 132,-2127 }, { 133,-2127 }, { 134,-2127 }, { 135,-2127 }, { 136,-2127 },
 { 137,-2127 }, { 138,-2127 }, { 139,-2127 }, { 140,-2127 }, { 141,-2127 },
 { 142,-2127 }, { 143,-2127 }, { 144,-2127 }, { 145,-2127 }, { 146,-2127 },
 { 147,-2127 }, { 148,-2127 }, { 149,-2127 }, { 150,-2127 }, { 151,-2127 },
 { 152,-2127 }, { 153,-2127 }, { 154,-2127 }, { 155,-2127 }, { 156,-2127 },
 { 157,-2127 }, { 158,-2127 }, { 159,-2127 }, { 160,-2127 }, { 161,-2127 },
 { 162,-2127 }, { 163,-2127 }, { 164,-2127 }, { 165,-2127 }, { 166,-2127 },
 { 167,-2127 }, { 168,-2127 }, { 169,-2127 }, { 170,-2127 }, { 171,-2127 },

 { 172,-2127 }, { 173,-2127 }, { 174,-2127 }, { 175,-2127 }, { 176,-2127 },
 { 177,-2127 }, { 178,-2127 }, { 179,-2127 }, { 180,-2127 }, { 181,-2127 },
 { 182,-2127 }, { 183,-2127 }, { 184,-2127 }, { 185,-2127 }, { 186,-2127 },
 { 187,-2127 }, { 188,-2127 }, { 189,-2127 }, { 190,-2127 }, { 191,-2127 },
 { 192,-2127 }, { 193,-2127 }, { 194,-2127 }, { 195,-2127 }, { 196,-2127 },
 { 197,-2127 }, { 198,-2127 }, { 199,-2127 }, { 200,-2127 }, { 201,-2127 },
 { 202,-2127 }, { 203,-2127 }, { 204,-2127 }, { 205,-2127 }, { 206,-2127 },
 { 207,-2127 }, { 208,-2127 }, { 209,-2127 }, { 210,-2127 }, { 211,-2127 },
 { 212,-2127 }, { 213,-2127 }, { 214,-2127 }, { 215,-2127 }, { 216,-2127 },
 { 217,-2127 }, { 218,-2127 }, { 219,-2127 }, { 220,-2127 }, { 221,-2127 },

 { 222,-2127 }, { 223,-2127 }, { 224,-2127 }, { 225,-2127 }, { 226,-2127 },
 { 227,-2127 }, { 228,-2127 }, { 229,-2127 }, { 230,-2127 }, { 231,-2127 },
 { 232,-2127 }, { 233,-2127 }, { 234,-2127 }, { 235,-2127 }, { 236,-2127 },
 { 237,-2127 }, { 238,-2127 }, { 239,-2127 }, { 240,-2127 }, { 241,-2127 },
 { 242,-2127 }, { 243,-2127 }, { 244,-2127 }, { 245,-2127 }, { 246,-2127 },
 { 247,-2127 }, { 248,-2127 }, { 249,-2127 }, { 250,-2127 }, { 251,-2127 },
 { 252,-2127 }, { 253,-2127 }, { 254,-2127 }, { 255,-2127 }, { 256,-2127 },
 {   0,  55 }, {   0,1150 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,1138 }, {   0,   0 },

 {   0,1136 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,1132 },
 {   0,   0 }, {   0,1130 }, {   0,   0 }, {   0,  54 }, {   0,1127 },
 {   0,   0 }, {   0,   0 }, {   0,1124 }, {   0,  12 }, {   0,1122 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   9,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,1111 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  48,   0 },
 {  49,   0 }, {  50,   0 }, {  51,   0 }, {  52,   0 }, {  53,   0 },
 {  54,   0 }, {  55,   0 }, {  56,   0 }, {  57,   0 }, {  32,   0 },
 {   0,  55 }, {   0,1090 }, {   0,   0 }, {   0,   0 }, {   0,1087 },

 {   0,   0 }, {  65,   0 }, {  66,   0 }, {  67,   0 }, {  68,   0 },
 {  69,   0 }, {  70,   0 }, {  48,   0 }, {  49,   0 }, {  50,   0 },
 {  51,   0 }, {  52,   0 }, {  53,   0 }, {  54,   0 }, {  55,   0 },
 {  56,   0 }, {  57,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  76,   6 },
 {   0,   0 }, {  76,   6 }, {   0,   0 }, {  69, 455 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  97,   0 }, {  98,   0 },
 {  99,   0 }, { 100,   0 }, { 101,   0 }, { 102,   0 }, {  85,  21 },
 {   0,   0 }, {  85,  43 }, {  46,-2164 }, {  68, 102 }, {  48,   0 },
 {  49,   0 }, {  50,  59 }, {  51,  59 }, {  52,  59 }, {  53,  59 },

 {  54,  59 }, {  55,  59 }, {  56,  59 }, {  57,  59 }, {   0,  55 },
 {   0,1031 }, { 108,   6 }, {   0,   0 }, { 108,   6 }, {   0,   0 },
 { 101, 455 }, {  65,-2010 }, {  66,-1951 }, {  67,-2010 }, {  68,-2010 },
 {  69,-1891 }, {  70,-2010 }, {  68, 117 }, {  72,-2537 }, {   0,   0 },
 {   0,   0 }, { 117,  21 }, {   0,   0 }, { 117,  43 }, {   0,   0 },
 { 100, 102 }, {   0,   0 }, {   0,1009 }, {   0,   0 }, {   0,   0 },
 {   0,1006 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, { 125,   2 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  97,-2010 }, {  98,-1951 },
 {  99,-2010 }, { 100,-2010 }, { 101,-1891 }, { 102,-2010 }, { 100, 117 },

 { 104,-2537 }, {  46,-2223 }, {   0,   0 }, {  48,   0 }, {  49,   0 },
 {  50,   0 }, {  51,   0 }, {  52,   0 }, {  53,   0 }, {  54,   0 },
 {  55,   0 }, {  56,   0 }, {  57,   0 }, {   0,  54 }, {   0, 972 },
 {   0,   0 }, {   0, 970 }, {   0,   2 }, {   0, 968 }, {   0,   0 },
 {  65,-2069 }, {  66,-2069 }, {  67,-2069 }, {  68,-2069 }, {  69,-1950 },
 {  70,-2069 }, {   0,   0 }, {  72,-2596 }, {  48, 366 }, {  49, 366 },
 {  50, 366 }, {  51, 366 }, {  52, 366 }, {  53, 366 }, {  54, 366 },
 {  55, 366 }, {  56, 366 }, {  57, 366 }, {   0,  55 }, {   0, 947 },
 {   0,   1 }, {   0, 945 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  69,  41 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {  97,-2069 }, {  98,-2069 }, {  99,-2069 },
 { 100,-2069 }, { 101,-1950 }, { 102,-2069 }, {   0,   0 }, { 104,-2596 },
 {   0,   0 }, {   0,   0 }, {  48,   0 }, {  49,   0 }, {  50,   0 },
 {  51,   0 }, {  52,   0 }, {  53,   0 }, {  54,   0 }, {  55,   0 },
 {  56,   0 }, {  57,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, { 101,  41 }, {  65,-2128 },
 {  66,-2128 }, {  67,-2128 }, {  68,-2128 }, {  69,-2128 }, {  70,-2128 },
 {  69,  25 }, {  72,-2655 }, {  48,   0 }, {  49,   0 }, {  50,   0 },
 {  51,   0 }, {  52,   0 }, {  53,   0 }, {  54,   0 }, {  55,   0 },
 {  56,   0 }, {  57,   0 }, {   0,  56 }, {   0, 888 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  65,   0 },
 {  66,   0 }, {  67,   0 }, {  68,   0 }, {  69,   0 }, {  70,   0 },
 {   0,   0 }, {  97,-2128 }, {  98,-2128 }, {  99,-2128 }, { 100,-2128 },
 { 101,-2128 }, { 102,-2128 }, { 101,  25 }, { 104,-2655 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  36,-2771 },
 {   0,   0 }, {  97,   0 }, {  98,   0 }, {  99,   0 }, { 100,   0 },
 { 101,   0 }, { 102,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  48,-2771 }, {  49,-2771 }, {  50,-2771 }, {  51,-2771 },

 {  52,-2771 }, {  53,-2771 }, {  54,-2771 }, {  55,-2771 }, {  56,-2771 },
 {  57,-2771 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  65,-2771 }, {  66,-2771 },
 {  67,-2771 }, {  68,-2771 }, {  69,-2771 }, {  70,-2771 }, {  71,-2771 },
 {  72,-2771 }, {  73,-2771 }, {  74,-2771 }, {  75,-2771 }, {  76,-2771 },
 {  77,-2771 }, {  78,-2771 }, {  79,-2771 }, {  80,-2771 }, {  81,-2771 },
 {  82,-2771 }, {  83, 258 }, {  84,-2771 }, {  85,-2771 }, {  86,-2771 },
 {  87,-2771 }, {  88,-2771 }, {  89,-2771 }, {  90,-2771 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  95,-2771 }, {   0,   0 },
 {  97,-2771 }, {  98,-2771 }, {  99,-2771 }, { 100,-2771 }, { 101,-2771 },

 { 102,-2771 }, { 103,-2771 }, { 104,-2771 }, { 105,-2771 }, { 106,-2771 },
 { 107,-2771 }, { 108,-2771 }, { 109,-2771 }, { 110,-2771 }, { 111,-2771 },
 { 112,-2771 }, { 113,-2771 }, { 114,-2771 }, { 115, 258 }, { 116,-2771 },
 { 117,-2771 }, { 118,-2771 }, { 119,-2771 }, { 120,-2771 }, { 121,-2771 },
 { 122,-2771 }, {   0,   0 }, {   0, 764 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   9, 258 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  32, 258 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {  46, 382 }, {   0,   0 },
 {  48, 382 }, {  49, 382 }, {  50, 382 }, {  51, 382 }, {  52, 382 },
 {  53, 382 }, {  54, 382 }, {  55, 382 }, {  56, 382 }, {  57, 382 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  65, 382 }, {  66, 382 }, {  67, 382 },
 {  68, 382 }, {  69, 382 }, {  70, 382 }, {  71, 382 }, {  72, 382 },
 {  73, 382 }, {  74, 382 }, {  75, 382 }, {  76, 382 }, {  77, 382 },

 {  78, 382 }, {  79, 382 }, {  80, 382 }, {  81, 382 }, {  82, 382 },
 {  83, 382 }, {  84, 382 }, {  85, 382 }, {  86, 382 }, {  87, 382 },
 {  88, 382 }, {  89, 382 }, {  90, 382 }, {   0,   0 }, {   0, 672 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  97, 382 },
 {  98, 382 }, {  99, 382 }, { 100, 382 }, { 101, 382 }, { 102, 382 },
 { 103, 382 }, { 104, 382 }, { 105, 382 }, { 106, 382 }, { 107, 382 },
 { 108, 382 }, { 109, 382 }, { 110, 382 }, { 111, 382 }, { 112, 382 },
 { 113, 382 }, { 114, 382 }, { 115, 382 }, { 116, 382 }, { 117, 382 },
 { 118, 382 }, { 119, 382 }, { 120, 382 }, { 121, 382 }, { 122, 382 },
 {   0,  54 }, {   0, 640 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   3 }, {   0, 630 }, {  43, 382 }, {   0,   0 }, {  45, 382 },
 {   0,   0 }, {   0,   0 }, {  48, 414 }, {  49, 414 }, {  50, 414 },
 {  51, 414 }, {  52, 414 }, {  53, 414 }, {  54, 414 }, {  55, 414 },
 {  56, 414 }, {  57, 414 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  36,-3029 }, {   0,   0 }, {  48,   0 },
 {  49,   0 }, {  50,   0 }, {  51,   0 }, {  52,   0 }, {  53,   0 },

 {  54,   0 }, {  55,   0 }, {  56,   0 }, {  57,   0 }, {  48,-3029 },
 {  49,-3029 }, {  50,-3029 }, {  51,-3029 }, {  52,-3029 }, {  53,-3029 },
 {  54,-3029 }, {  55,-3029 }, {  56,-3029 }, {  57,-3029 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  65,-3029 }, {  66,-3029 }, {  67,-3029 }, {  68,-3029 },
 {  69,-3029 }, {  70,-3029 }, {  71,-3029 }, {  72,-3029 }, {  73,-3029 },
 {  74,-3029 }, {  75,-3029 }, {  76,-3029 }, {  77,-3029 }, {  78,-3029 },
 {  79,-3029 }, {  80,-3029 }, {  81,-3029 }, {  82,-3029 }, {  83,-3029 },
 {  84,-3029 }, {  85,-3029 }, {  86,-3029 }, {  87,-3029 }, {  88,-3029 },
 {  89,-3029 }, {  90,-3029 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {  95,-3029 }, {   0,   0 }, {  97,-3029 }, {  98,-3029 },
 {  99,-3029 }, { 100,-3029 }, { 101,-3029 }, { 102,-3029 }, { 103,-3029 },
 { 104,-3029 }, { 105,-3029 }, { 106,-3029 }, { 107,-3029 }, { 108,-3029 },
 { 109,-3029 }, { 110,-3029 }, { 111,-3029 }, { 112,-3029 }, { 113,-3029 },
 { 114,-3029 }, { 115,-3029 }, { 116,-3029 }, { 117,-3029 }, { 118,-3029 },
 { 119,-3029 }, { 120,-3029 }, { 121,-3029 }, { 122,-3029 }, {   0,   0 },
 {   0, 506 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   9,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  32,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  46, 124 }, {   0,   0 }, {  48, 124 }, {  49, 124 },
 {  50, 124 }, {  51, 124 }, {  52, 124 }, {  53, 124 }, {  54, 124 },
 {  55, 124 }, {  56, 124 }, {  57, 124 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {  65, 124 }, {  66, 124 }, {  67, 124 }, {  68, 124 }, {  69, 124 },

 {  70, 124 }, {  71, 124 }, {  72, 124 }, {  73, 124 }, {  74, 124 },
 {  75, 124 }, {  76, 124 }, {  77, 124 }, {  78, 124 }, {  79, 124 },
 {  80, 124 }, {  81, 124 }, {  82, 124 }, {  83, 124 }, {  84, 124 },
 {  85, 124 }, {  86, 124 }, {  87, 124 }, {  88, 124 }, {  89, 124 },
 {  90, 124 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {  97, 124 }, {  98, 124 }, {  99, 124 },
 { 100, 124 }, { 101, 124 }, { 102, 124 }, { 103, 124 }, { 104, 124 },
 { 105, 124 }, { 106, 124 }, { 107, 124 }, { 108, 124 }, { 109, 124 },
 { 110, 124 }, { 111, 124 }, { 112, 124 }, { 113, 124 }, { 114, 124 },
 { 115, 124 }, { 116, 124 }, { 117, 124 }, { 118, 124 }, { 119, 124 },

 { 120, 124 }, { 121, 124 }, { 122, 124 }, {   0,   0 }, {   0, 382 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   9,-742 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  32,-742 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {  46,   0 }, {   0,   0 }, {  48,   0 }, {  49,   0 }, {  50,   0 },
 {  51,   0 }, {  52,   0 }, {  53,   0 }, {  54,   0 }, {  55,   0 },
 {  56,   0 }, {  57,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  65,   0 },
 {  66,   0 }, {  67,   0 }, {  68,   0 }, {  69,   0 }, {  70,   0 },
 {  71,   0 }, {  72,   0 }, {  73,   0 }, {  74,   0 }, {  75,   0 },
 {  76,   0 }, {  77,   0 }, {  78,   0 }, {  79,   0 }, {  80,   0 },
 {  81,   0 }, {  82,   0 }, {  83,   0 }, {  84,   0 }, {  85,   0 },
 {  86,   0 }, {  87,   0 }, {  88,   0 }, {  89,   0 }, {  90,   0 },
 {   0,   0 }, {   0, 290 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {  97,   0 }, {  98,   0 }, {  99,   0 }, { 100,   0 },
 { 101,   0 }, { 102,   0 }, { 103,   0 }, { 104,   0 }, { 105,   0 },
 { 106,   0 }, { 107,   0 }, { 108,   0 }, { 109,   0 }, { 110,   0 },
 { 111,   0 }, { 112,   0 }, { 113,   0 }, { 114,   0 }, { 115,   0 },
 { 116,   0 }, { 117,   0 }, { 118,   0 }, { 119,   0 }, { 120,   0 },
 { 121,   0 }, { 122,   0 }, {   0,  54 }, {   0, 258 }, { 125,-740 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {  48,  32 },
 {  49,  32 }, {  50,  32 }, {  51,  32 }, {  52,  32 }, {  53,  32 },

 {  54,  32 }, {  55,  32 }, {  56,  32 }, {  57,  32 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {  48,   0 }, {  49,   0 }, {  50,   0 }, {  51,   0 },
 {  52,   0 }, {  53,   0 }, {  54,   0 }, {  55,   0 }, {  56,   0 },
 {  57,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },

 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 }, {   0,   0 },
 { 257,  62 }, {   1,   0 },    };

static yyconst struct yy_trans_info *yy_start_state_list[7] =
    {
    &yy_transition[1],
    &yy_transition[3],
    &yy_transition[261],
    &yy_transition[519],
    &yy_transition[777],
    &yy_transition[1035],
    &yy_transition[1293],

    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "lex.l"
#line 2 "lex.l"

#include "token.h"
#include "util.h"

#ifdef _WIN32
#include <io.h>
#define FILE_SEP "\\"
#else
#include <unistd.h>
#define FILE_SEP "/"
#endif

#define yywrap() 1
#define YY_SKIP_YYWRAP 1

#define YY_NO_UNPUT 1

// Some static data definition

static char *file_name;
static int line, pos;    // Token position
extern char *i_path;

struct scan_state {
    int             pos;
    int             line;
    char*           file_name;
    char*           search_path;
    FILE*           input;
    YY_BUFFER_STATE buffer;
};

#define MAX_INCLUDE_DEPTH 256   // Include stack depth
#define MAX_ID_LENGTH     256

class scan_ctx {
  protected:
    scan_state      stack[ MAX_INCLUDE_DEPTH ];
    int             sp;

  public:
    void push();
    void attach(char* name, FILE* in);
    void pop();
    bool empty() { return sp == 0; }
    bool find(char* name) ;
    scan_ctx() { sp = 0; }
};

static scan_ctx scanner;
static int type_or_var_context;


void scanner_input(char *file)
{
    FILE* f = fopen (file, "r");

    if (f == NULL) {
	error("can't open input source file: %s", file);
    }
    scanner.attach(file, f);
}


// Hints for macro functionality (inherited from rtl2c)
static nm_entry *nm = NULL;	       // Token name
static char *text   = NULL;            // Token text if != NULL

static int include_level;

class use_ctx {
  public:
    char* fname;
    use_ctx* next;

    use_ctx(char* name, use_ctx* chain) {
	fname = name;
	next = chain;
    }
};

static use_ctx* use_chain;

#undef  ECHO
#define ECHO

// Token generator function

int tkn (int tag) {
   curr_token = new token(text ? text : strdup(yytext),
			  tag, line, pos, nm);
   nm = NULL; text = NULL;
   for (char *c = yytext; *c != 0; c++) {
       if (*c == '\n') { line++; pos = 0; }
       else if (*c == '\t') { pos += TAB_WIDTH - (pos % TAB_WIDTH); }
       else pos++;
   }
   curr_token->fname = file_name;
   if (include_level > 0) {
       curr_token->attr |= token::from_include_file;
   }
   return 1;
}



// Include file name processing

static char *include_name (char *src) {
    char *t;
    char *name = new char[strlen(src)+8];
    char *dst = name;
    if (strchr(src, '\n') != NULL) {
        line += 1;
        pos = 0;
    }
    while (*src == '\'' || isspace(*src)) src++;        // Skip leading '[ ]
    if ((t = strchr (src, '[')) != NULL) {
#if 0
        int gid, uid, n;
        if (sscanf(t, "[%d,%d]%n", &gid, &uid, &n) == 2) {
            dst += sprintf(dst, "../%03d%03d/", gid, uid);
	    src = t + n;
        }
	else
#endif
	{
	    if ((t = strrchr(src, ']')) != NULL) {
	        src = t+1;
            }
        }
    }
    bool suffix = FALSE;
    while(*src && !isspace(*src) && *src != ';' && *src != '\''
          && *src!='\n' && *src != '}')
    {
        if (*src == '.') suffix = TRUE;
	*dst++ = tolower(*(unsigned char*)src++);
    }
    *dst = 0;
    if (!suffix) strcpy(dst, ".pas");

    if (scanner.find(name)) {
	error(line, pos, file_name, "file %s already included !\n", name);
    }
    return name;
}

static int yyinput(void);

inline int yyinput_file() {
    int ch = yyinput();
    if (ch == '\n') { line++; pos = 0; }
    else if (ch == '\t') { pos += TAB_WIDTH - (pos % TAB_WIDTH); }
    else pos++;
    return ch;
}

static int process_end_of_line_comment() {
    char cmt_buf[1024];
    char* p = cmt_buf;
    int c;
    *p++ = '/';
    *p++ = '/';
    while((c = yyinput_file()) != EOF) {
        if (c == '\n') {
           *p++ = '\n';
           *p = '\0';
           curr_token = new token(NULL, TKN_CMNT, line, pos);
           curr_token->in_text = curr_token->out_text = strdup(cmt_buf);
           return 1;
        } else {
           *p++ = (char)c;
        }
    }
    error(line, pos, file_name, "EOF in comment !\n");
    return -1;
}

static int process_comments() {
    static int cmt_buf_len = 256;
    static char* cmt_buf = new char[cmt_buf_len];
    int c, pc = 0;
    char *p = cmt_buf;
    char cmt_start = *yytext;
    *p++ = '/';
    *p++ = '*';

    curr_token = new token(NULL, TKN_CMNT, line, pos);

    pos += strlen(yytext);

    if (nested_comments) {
	while((c = yyinput_file()) != EOF) {
	    if (c == '/' && pc == '*') c = ' ';
	    if (p == cmt_buf + cmt_buf_len) {
		cmt_buf = (char*)realloc(cmt_buf, 2*cmt_buf_len);
		p = cmt_buf + cmt_buf_len;
		cmt_buf_len *= 2;
	    }
	    if ((cmt_start == '{' && c == '}') ||
		(cmt_start == '(' && c == ')' && pc == '*'))
            {
		size_t len = p - cmt_buf;
		char* cmt_text = new char[len + 3];
		memcpy(cmt_text, cmt_buf, len);
		if (pc != '*') cmt_text[len++] = '*';
		cmt_text[len++] = '/';
		cmt_text[len] = '\0';
                if (turbo_pascal && cmt_text[2] == '$') {
                   *p = '\0';
                   if (strincmp(cmt_text+3, "IFDEF", 5) == 0) {
                      sprintf(cmt_text, "#ifdef %s", cmt_buf+9);
                   } else if (strincmp(cmt_text+3, "ELSE", 4) == 0) {
                      sprintf(cmt_text, "#else");
                   } else if (strincmp(cmt_text+3, "ENDIF", 5) == 0) {
                      sprintf(cmt_text, "#endif");
                   } else if (strincmp(cmt_text+3, "IFNDEF", 6) == 0) {
                      sprintf(cmt_text, "#ifndef %s", cmt_buf+10);
                   } else if (strincmp(cmt_text+3, "DEFINE", 6) == 0) {
                      sprintf(cmt_text, "#define %s", cmt_buf+10);
                   } else if (strincmp(cmt_text+3, "IFOPT", 5) == 0) {
		      int value = 1;
                      char* p = strchr(cmt_text+8, '+');
		      if (p != NULL) *p = '\0';
		      else if ((p = strchr(cmt_text+8, '-')) != NULL) {
			value = 0;
			*p = '\0';
		      }
		      for (p = cmt_buf+8; *p == ' '; p++);
                      sprintf(cmt_text, "#if OPTION_%s == %d",
			      p, value);
                   }
                }
		curr_token->in_text = curr_token->out_text = cmt_text;
		return 1;
	    }
	    *p++ = pc = c;
	}
    } else {
	while((c = yyinput_file()) != EOF) {
	    if (c == '/' && pc == '*') c = ' ';
	    if (p == cmt_buf + cmt_buf_len) {
		cmt_buf = (char*)realloc(cmt_buf, 2*cmt_buf_len);
		p = cmt_buf + cmt_buf_len;
		cmt_buf_len *= 2;
	    }
	    if (c == '}' || (c == ')' && pc == '*')) {
		size_t len = p - cmt_buf;
		char* cmt_text = new char[len + 3];
		memcpy(cmt_text, cmt_buf, len);
		if (pc != '*') cmt_text[len++] = '*';
		cmt_text[len++] = '/';
		cmt_text[len] = '\0';
		curr_token->in_text = curr_token->out_text = cmt_text;
		return 1;
	    }
	    *p++ = pc = c;
	}
    }
    error(line, pos, file_name, "EOF in comment !\n");
    return -1;
}

/* the "incl" state is used for picking up the name
 * of an include file
 */


#line 2216 "lex.yy.c"

#define INITIAL 0
#define incl 1
#define use 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * out_str  );

int yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	errno=0; \
	while ( (result = read( fileno(yyin), (char *) buf, max_size )) < 0 ) \
	{ \
		if( errno != EINTR) \
		{ \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
			break; \
		} \
		errno=0; \
		clearerr(yyin); \
	}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 290 "lex.l"


#line 2392 "lex.yy.c"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start_state_list[(yy_start)];
yy_match:
		{
		register yyconst struct yy_trans_info *yy_trans_info;

		register YY_CHAR yy_c;

		for ( yy_c = YY_SC_TO_UI(*yy_cp);
		      (yy_trans_info = &yy_current_state[(unsigned int) yy_c])->
		yy_verify == yy_c;
		      yy_c = YY_SC_TO_UI(*++yy_cp) )
			{
			yy_current_state += yy_trans_info->yy_nxt;

			if ( yy_current_state[-1].yy_nxt )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			}
		}

yy_find_action:
		yy_act = yy_current_state[-1].yy_nxt;

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos) + 1;
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 292 "lex.l"
BEGIN(incl);
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 293 "lex.l"
BEGIN(incl);
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 294 "lex.l"
BEGIN(use); /* Turbo Pascal */
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 296 "lex.l"
{  /* skip whitespaces */
    char* p = yytext;
    while(*p != '\0') {
	if (*p++ == '\n') line += 1;
    }
}
	YY_BREAK
case 5:
/* rule 5 can match eol */
YY_RULE_SETUP
#line 303 "lex.l"
{ /* skip comments */
    char* p = yytext;
    while(*p != '\0') {
	if (*p++ == '\n') line += 1;
    }
}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 310 "lex.l"
{
                  /* got the include file name */
    char *fname = dprintf("%s.pas", yytext);
    for (char* p = fname; *p != '\0'; p++) *p = tolower(*p);

    use_ctx* up;
    for (up = use_chain;
	 up != NULL && strcmp(fname, up->fname) != 0;
	 up = up->next);

    if (up == NULL) {
        char *xname;
        FILE *in = NULL;
        char *try_dir, *next_dir;
        int dir_length;

	for (try_dir = i_path; try_dir != NULL; try_dir = next_dir) {
	    if ((next_dir = strchr (try_dir, path_sep)) != NULL ) {
		dir_length = next_dir - try_dir;
		next_dir++;
	    } else {
		dir_length = strlen (try_dir);
	    }
	    xname = dprintf ("%.*s" FILE_SEP "%s", dir_length, try_dir, fname);
	    if ((in = fopen(xname, "r")) != NULL) {
		use_chain = new use_ctx(fname, use_chain);
		curr_token = new token(xname, TKN_PUSH_UNIT);
		curr_token->out_text = fname;
		include_level += 1;
		BEGIN(INITIAL);     // To leave include state
		scanner.push();
		scanner.attach(xname, in);
		return 1;
	    }
	}
	warning(line, pos, file_name, "can't include file %s", fname);
        curr_token = new token(dprintf("/*#include \"%s.h\"*/\n", yytext),
	                       TKN_CMNT, line, pos);
    } else {
        curr_token = new token(dprintf("#include \"%s.h\"\n", yytext),
	                       TKN_CMNT, line, pos);
    }
    return 1;
}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 354 "lex.l"
{
    BEGIN(INITIAL);     // To leave include state
}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 359 "lex.l"
{
    error(line, pos, file_name, "unrecognized token: %s\n",
		yytext);
}
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 367 "lex.l"
{  /* eat the whitespace */
    char* p = yytext;
    while(*p != '\0') {
	if (*p++ == '\n') line += 1;
    }
}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 373 "lex.l"
{
                  /* got the include file name */
    BEGIN(INITIAL);     // To leave include state

    char *fname = include_name (yytext);
    char *xname;
    FILE *in = NULL;
    char *try_dir, *next_dir;
    int dir_length;

    for (try_dir = i_path; try_dir != NULL; try_dir = next_dir) {
	if ((next_dir = strchr (try_dir, path_sep)) != NULL ) {
	    dir_length = next_dir - try_dir;
	    next_dir++;
	} else {
	    dir_length = strlen (try_dir);
	}
	xname = dprintf ("%.*s" FILE_SEP "%s", dir_length, try_dir, fname);
	if ((in = fopen(xname, "r")) != NULL) {
	    include_level += 1;
	    scanner.push();
	    scanner.attach(xname, in);
	    curr_token = new token(xname, TKN_PUSH_FILE);
	    curr_token->out_text = fname;
	    return 1;
	}
    }
    warning(line, pos, file_name, "can't include file %s", fname);
    curr_token = new token(dprintf("/*#include \"%s\"*/", fname),
	                   TKN_CMNT, line, pos);
    return 1;
}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 406 "lex.l"
{
    error(line, pos, file_name, "unrecognized token: %s\n",
		yytext);
}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 411 "lex.l"
{
    char *fname = include_name (yytext+3);
    char *xname;
    FILE *in = NULL;
    char *try_dir, *next_dir;
    int dir_length;

    for (try_dir = i_path; try_dir != NULL; try_dir = next_dir) {
	if ((next_dir = strchr (try_dir, path_sep)) != NULL ) {
	    dir_length = next_dir - try_dir;
	    next_dir++;
	} else {
	    dir_length = strlen (try_dir);
	}
	xname = dprintf ("%.*s" FILE_SEP "%s", dir_length, try_dir, fname);
	if ((in = fopen(xname, "r")) != NULL) {
	    include_level += 1;
	    scanner.push();
	    scanner.attach(xname, in);
	    curr_token = new token(xname, TKN_PUSH_FILE);
	    curr_token->out_text = fname;
	    return 1;
	}
    }
    warning(line, pos, file_name, "can't include file %s", fname);
    curr_token = new token(dprintf("/*#include \"%s\"*/", fname),
	                   TKN_CMNT, line, pos);
    return 1;
}
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(incl):
case YY_STATE_EOF(use):
#line 441 "lex.l"
{
    if (scanner.empty()) {
	return -1;  // MAGIC ! (< 0 means end of files)
    } else {
	scanner.pop();
	include_level -= 1;
	curr_token =  new token((char*)NULL, TKN_POP_FILE);
	return 1;
    }
}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 452 "lex.l"
{ return process_end_of_line_comment(); }
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 453 "lex.l"
{ return process_comments(); }
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 454 "lex.l"
{ return process_comments(); }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 455 "lex.l"
{ return process_comments(); }
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 457 "lex.l"
{ return tkn(TKN_LPAR); }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 458 "lex.l"
{ return tkn(TKN_RPAR); }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 459 "lex.l"
{ text = "["; return tkn(TKN_LBR);  }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 460 "lex.l"
{ text = "]"; return tkn(TKN_RBR);  }
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 461 "lex.l"
{ return tkn(TKN_LBR);  }
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 462 "lex.l"
{ return tkn(TKN_RBR);  }
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 463 "lex.l"
{ return tkn(TKN_MUL);  }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 464 "lex.l"
{ return tkn(TKN_PLUS); }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 465 "lex.l"
{ return tkn(TKN_MINUS);}
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 466 "lex.l"
{ return tkn(TKN_C_SHR); }
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 467 "lex.l"
{ return tkn(TKN_C_SHL);}
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 468 "lex.l"
{ return tkn(TKN_C_AND);}
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 469 "lex.l"
{ return tkn(TKN_C_OR);}
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 470 "lex.l"
{ return tkn(TKN_LETMUL);  }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 471 "lex.l"
{ return tkn(TKN_LETADD); }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 472 "lex.l"
{ return tkn(TKN_LETSUB);}
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 473 "lex.l"
{ return tkn(TKN_LETSHR); }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 474 "lex.l"
{ return tkn(TKN_LETSHL);}
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 475 "lex.l"
{ return tkn(TKN_LETAND);}
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 476 "lex.l"
{ return tkn(TKN_LETOR);}
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 477 "lex.l"
{ return tkn(TKN_LETDIV);}
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 478 "lex.l"
{ return tkn(TKN_C_NOT);}
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 479 "lex.l"
{ return tkn(TKN_COMMA);}
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 480 "lex.l"
{ return tkn(TKN_DOT);  }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 481 "lex.l"
{ return tkn(TKN_DOTS); }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 482 "lex.l"
{ return tkn(TKN_DIVR);  }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 483 "lex.l"
{ return turbo_pascal ? tkn(TKN_ADDR) : tkn(TKN_HEAP); }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 484 "lex.l"
{ if (turbo_pascal && !type_or_var_context
		  && curr_token->tag != TKN_HEAP
                  && curr_token->tag != TKN_RBR && curr_token->tag != TKN_RPAR
		  && curr_token->tag != TKN_REF
		  && curr_token->tag != TKN_IDENT
		  && curr_token->cat != CAT_ID)
               {
		   text = dprintf("#%d", yyinput() & 31);
		   return tkn(TKN_SCONST);
              }
	      return tkn(TKN_HEAP);
            }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 496 "lex.l"
{ return tkn(TKN_LET);  }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 497 "lex.l"
{ return tkn(TKN_COLON);}
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 498 "lex.l"
{ return tkn(TKN_SEMICOLON); }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 499 "lex.l"
{ return tkn(TKN_LE);  }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 500 "lex.l"
{ return tkn(TKN_GE);  }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 501 "lex.l"
{ return tkn(TKN_LT);  }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 502 "lex.l"
{ return tkn(TKN_GT);  }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 503 "lex.l"
{ return tkn(TKN_EQ);  }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 504 "lex.l"
{ return tkn(TKN_NE);  }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 507 "lex.l"
{ return tkn(TKN_RCONST); }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 508 "lex.l"
{ return tkn(TKN_ICONST);  }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 510 "lex.l"
{
               char lc_buf[MAX_ID_LENGTH];
	       char *src = yytext, *dst = lc_buf;
	       if (*yytext == '$') {
                   if (turbo_pascal) { /* hexademical number */
  	               return tkn(TKN_ICONST);
                   } else if (ignore_preprocessor_directives) {
                       int c;
                       char cmt_buffer[1024];
                       int i = sprintf(cmt_buffer, "/*%s", yytext);
                       curr_token = new token(NULL, TKN_CMNT, line, pos);
                       pos += strlen(yytext);
 	               while((c = yyinput_file()) != EOF && c != '\n') {
                             if (i == (int)sizeof(cmt_buffer)-4) {
                                 error(line, pos, file_name, "Preprocessor directive too long\n");
                             } else {
                                 cmt_buffer[i++] = (char)c;
                             }
                        }
                        cmt_buffer[i++] = '*';
                        cmt_buffer[i++] = '/';
                        cmt_buffer[i++] = '\n';
                        cmt_buffer[i++] = '\0';
               		char* cmt_text = new char[i];
		        memcpy(cmt_text, cmt_buffer, i);
                        curr_token->in_text = curr_token->out_text = cmt_text;
                        return 1;
                   }
 	       }
	       do {
	           *dst++ = tolower(*(unsigned char*)src);
	       } while (*src++);
	       nm = nm_entry::add(lc_buf, TKN_IDENT);
	       int tag = nm->tag;

	       if (turbo_pascal) {
	           if (tag == TKN_TYPE || tag == TKN_VAR) {
		       type_or_var_context = TRUE;
	           } else if (tag == TKN_BEGIN || tag == TKN_CONST) {
		       type_or_var_context = FALSE;
		   } else if (tag == TKN_IMPLEMENTATION) {
		       if (include_level > 0)  {
		           scanner.pop();
		           include_level -= 1;
			   BEGIN(use);
			   curr_token = new token((char*)NULL, TKN_UNIT_END);
                           return 1;
                       } else {
		           return tkn(TKN_IMPLEMENTATION);
                       }
		   } else if (tag == TKN_INTERFACE) {
                       if (use_chain == NULL) {
                           use_chain = new use_ctx(file_name, NULL);
                       }
		       tkn(TKN_INTERFACE);
		       return 1;
		   }
               }
	       if (tag == TKN_RESERVED) {
	           text = dprintf("%s_", lc_buf);
	           nm = nm_entry::add(text, TKN_IDENT);
	           tag = TKN_IDENT;
	       } else if (!preserve_case || tag != TKN_IDENT) {
	           text = strdup(lc_buf);
	       }
	       return tkn(tag);
             }
	YY_BREAK
case 57:
/* rule 57 can match eol */
YY_RULE_SETUP
#line 579 "lex.l"
{ return tkn(TKN_SCONST); }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 581 "lex.l"
{ return tkn(TKN_SPACE); }
	YY_BREAK
case 59:
/* rule 59 can match eol */
YY_RULE_SETUP
#line 583 "lex.l"
{ return tkn(TKN_LN); }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 585 "lex.l"
{
                error(line, pos, file_name, "unrecognized token: %s\n",
		      yytext);
             }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 590 "lex.l"
ECHO;
	YY_BREAK
#line 3000 "lex.yy.c"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = yy_start_state_list[(yy_start)];

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		yy_current_state += yy_current_state[(*yy_cp ? YY_SC_TO_UI(*yy_cp) : 256)].yy_nxt;
		if ( yy_current_state[-1].yy_nxt )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register int yy_c = 256;
	register yyconst struct yy_trans_info *yy_trans_info;

	yy_trans_info = &yy_current_state[(unsigned int) yy_c];
	yy_current_state += yy_trans_info->yy_nxt;
	yy_is_jam = (yy_trans_info->yy_verify != yy_c);

	if ( ! yy_is_jam )
		{
		if ( yy_current_state[-1].yy_nxt )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		}

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void yyset_lineno (int  line_number )
{
    
    yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
        yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
        yyout = out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
        yy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 590 "lex.l"



void scan_ctx::push() {
    assert(sp < MAX_INCLUDE_DEPTH);
    stack[sp].file_name = file_name;
    stack[sp].buffer = YY_CURRENT_BUFFER;
    stack[sp].search_path = i_path;
    stack[sp].pos = pos;
    stack[sp].line = line;
    stack[sp].input = yyin;
    sp += 1;
}


void scan_ctx::attach(char* name, FILE* in) {
    pos = 0;
    line = 1;
    file_name = name;
    yyin = in;
    char* base_name = strrchr(name, PATH_SEP);
    if (base_name != NULL) {
	i_path = dprintf("%.*s%c%s", base_name-name, name, path_sep, i_path);
    }
    yy_switch_to_buffer(yy_create_buffer(yyin,YY_BUF_SIZE));
}

void scan_ctx::pop() {
    assert(sp > 0);
    sp -= 1;
    pos = stack[sp].pos;
    line = stack[sp].line;
    file_name = stack[sp].file_name;
    fclose(yyin);
    yyin = stack[sp].input;
    i_path = stack[sp].search_path;
    yy_switch_to_buffer(stack[sp].buffer);
}

bool scan_ctx::find(char* name) {
    for (int i = 0; i < sp; i ++ ) {
	if (strcmp(stack[i].file_name, name) == 0) {
	    return TRUE;
	}
    }
    return FALSE;
}


