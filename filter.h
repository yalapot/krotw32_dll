// filter.h (C) 2006 by Vitaly Bogomolov 
// interface for filter functions library
#ifndef KRTAPI
#include "krtapi.h"
#endif

// половина размера палитры - средний уровень
#define MIDLE_LEVEL (KRT_PALLETE_SIZE / 2)

// ***************************************************************
// функция одной итерации фильтра "Експоненциальное среднее"
int fltExponent (
KRTDATA* data,                    // указатель на массив обработанных данных страницы развертки
KRTROW *rowData,                  // указатель на буфер сырых данных для страницы
long *dataOrnt,                   // указатель на вектор ориентации страничного буфера
long length,                      // размер массива по X
long sens_num,                    // размер массива по Y(количество датчиков)
long ExpAvrgWaightingCoefficient, // весовой коэффициэнт фильтра (значения от 0 до 100)
long Amplifer                     // параметр усиления фильтра (значения от 1 до 100)
);

// ***************************************************************
// функция фильтрации бесшовной трубы
int fltUnweld (
KRTDATA* data,         // указатель на массив обработанных данных страницы развертки
KRTROW *dataRow,       // указатель на буфер сырых данных для страницы
long *dataOrnt,        // указатель на вектор ориентации страничного буфера
long x,                // размер массива по X
long y,                // размер массива по Y(количество датчиков)
long filterParam       // параметр фильтра
);

// ***************************************************************
// функция фильтрации цельнотянутой трубы
int fltRolled (
KRTDATA* data,         // указатель на массив обработанных данных страницы развертки
KRTROW *dataRow,       // указатель на буфер сырых данных для страницы
long *dataOrnt,        // указатель на вектор ориентации страничного буфера
long x,                // размер массива по X
long y,                // размер массива по Y(количество датчиков)
long filterParam1,     // параметр1 фильтра
long filterParam2,     // параметр2 фильтра
long rolledAmplifer    // параметр усиления фильтра цельнотянутых труб
);

// ***************************************************************
// функция фильтрации пригрузов
int fltPrigruz (
KRTDATA *data,         // указатель на массив обработанных данных страницы развертки
KRTROW *dataRow,       // указатель на буфер сырых данных для страницы
long *dataOrnt,        // указатель на вектор ориентации страничного буфера
long x,                // размер массива по X
long y                 // размер массива по Y(количество датчиков)
);

// ***************************************************************
// функция расчета условной нормальной составляющей            
// (производной по X, убирает пригруза,патроны и прочую л...)
extern int fltDerivation (
KRTDATA* data,        // указатель на входной массив
int x,                // размер массива по X
int y,                // размер массива по Y(количество датчиков)
KRTDATA* out1,        // указатель на выходной массив (с погашением темных участков)
KRTDATA* out2         // указатель на выходной массив
);

// ***************************************************************
// производная по Y, убирает сбои датчиков
extern void fltDerivationY (
KRTDATA* data,        // указатель на входной массив
int x,                // размер массива по X
int y,                // размер массива по Y(количество датчиков)
KRTDATA* out          // указатель на выходной массив (с погашением темных участков)
);

// ***************************************************************
//фильтр Собела (Out=|Y|-|X|)
//использует окно (3*3)
/*
|-x4|-2x5|-x6|
--------------
|   | x* |   |
--------------
|+x1|+2x2|+x3|
x*=x1+2x2+x3-x4-2x5-x6
-------------------
| +y1|   |-y4 |
---------------
|+2y2| y*|-2y5|
---------------
| +y3|   |-y6 |
y*=y1+2y2+y3-y4-2y5-y6
___________________
Out=|y|-|x|
*/
extern void fltSobel (
KRTDATA* In,          // указатель на входной массив                                
int sizeX,            // размер массива по X                                        
int sizeY,            // размер массива по Y(количество датчиков)                   
KRTDATA* Out          // указатель на выходной массив
);


// ***************************************************************
// функция полигональной фильтрации фильтрации
int fltPoligon (
KRTDATA* data,         // указатель на массив обработанных данных страницы развертки
KRTROW *rowData,       // указатель на буфер сырых данных для страницы
long *dataOrnt,        // указатель на вектор ориентации страничного буфера
long length,           // размер массива по X
long sens_num,         // размер массива по Y(количество датчиков)
long FilterLength,     // ширина окна фильтра (1-500 в отсчетах одометра, default = 30)
long PoligonAmplifer,   // параметр усиления фильтра (1-30, default =2)
long Srez_ON_OF        // включение/выключение выравнивания
);

// ***************************************************************
// функция просмотра без математики
int fltNo_math (
KRTDATA* data,         // указатель на массив обработанных данных страницы развертки
KRTROW *rowData,       // указатель на буфер сырых данных для страницы
long *dataOrnt,        // указатель на вектор ориентации страничного буфера
long length,           // размер массива по X
long sens_num,         // размер массива по Y(количество датчиков)
T_SENSOR *sensor       // указатель на вектор настроек датчиков. для доступа к элементам базовой линии: crz->sensor[i].delta
);

// ***************************************************************
// функция фильтра волосок
int flt_filament (
KRTDATA* data,         // указатель на массив обработанных данных страницы развертки
KRTROW *rowData,       // указатель на буфер сырых данных для страницы
long *dataOrnt,        // указатель на вектор ориентации страничного буфера
long length,           // размер массива по X
long sens_num,         // размер массива по Y(количество датчиков)
T_SENSOR *sensor,      // указатель на вектор настроек датчиков. для доступа к элементам базовой линии: crz->sensor[i].delta
long filterParam,      // параметр усиление 0-64
long FilterLength,     // ширина окна фильтра (1-500 в отсчетах одометра, default = 100)
long AwerageLength     // параметр kolichestvo izmereniy dlya rascheta srednego (1-50, default =25)
);

// ***************************************************************
// функция фильтра 2019
int flt_Filter2019 (
KRTDATA* data,         // указатель на массив обработанных данных страницы развертки
KRTROW *rowData,       // указатель на буфер сырых данных для страницы
long *dataOrnt,        // указатель на вектор ориентации страничного буфера
long length,           // размер массива по X
long sens_num,         // размер массива по Y(количество датчиков)
T_SENSOR *sensor,      // указатель на вектор настроек датчиков. для доступа к элементам базовой линии: crz->sensor[i].delta
long filterParam       // параметр усиление 0-64
);

// ***************************************************************
// функция фильтра Свертка 1
int flt_convolution_1 (
KRTDATA* data,         // указатель на массив обработанных данных страницы развертки
KRTROW *rowData,       // указатель на буфер сырых данных для страницы
long *dataOrnt,        // указатель на вектор ориентации страничного буфера
long length,           // размер массива по X
long sens_num,         // размер массива по Y(количество датчиков)
T_SENSOR *sensor,      // указатель на вектор настроек датчиков. для доступа к элементам базовой линии: crz->sensor[i].delta
long filterParam       // параметр усиление 0-64
);

// ***************************************************************
// функция фильтра Свертка 2
int flt_convolution_2 (
KRTDATA* data,         // указатель на массив обработанных данных страницы развертки
KRTROW *rowData,       // указатель на буфер сырых данных для страницы
long *dataOrnt,        // указатель на вектор ориентации страничного буфера
long length,           // размер массива по X
long sens_num,         // размер массива по Y(количество датчиков)
T_SENSOR *sensor,      // указатель на вектор настроек датчиков. для доступа к элементам базовой линии: crz->sensor[i].delta
long filterParam       // параметр усиление 0-64
);

// ***************************************************************
// функция фильтра Свертка 3
int flt_convolution_3 (
KRTDATA* data,         // указатель на массив обработанных данных страницы развертки
KRTROW *rowData,       // указатель на буфер сырых данных для страницы
long *dataOrnt,        // указатель на вектор ориентации страничного буфера
long length,           // размер массива по X
long sens_num,         // размер массива по Y(количество датчиков)
T_SENSOR *sensor,      // указатель на вектор настроек датчиков. для доступа к элементам базовой линии: crz->sensor[i].delta
long filterParam       // параметр усиление 0-64
);

// ***************************************************************
// функция медианного усреднения на весь экран
int fltMedianFullScreen (
KRTDATA* data,         // указатель на массив обработанных данных страницы развертки
KRTROW *rowData,       // указатель на буфер сырых данных для страницы
long *dataOrnt,        // указатель на вектор ориентации страничного буфера
long length,           // размер массива по X
long sens_num,         // размер массива по Y(количество датчиков)
long ExpAvrgWaightingCoefficient,
long Amlification,      // параметр усиление 0-64
long FilterLength,     // ширина окна фильтра (1-500 в отсчетах одометра, default = 100)
long AwerageLength     // параметр kolichestvo izmereniy dlya rascheta srednego (1-50, default =25)
);

// функция фильтра обрезание верхнего и нижнего сигнала
int flt_Cut_big_small (
KRTDATA* data,         // указатель на массив обработанных данных страницы развертки
KRTROW *rowData,       // указатель на буфер сырых данных для страницы
long *dataOrnt,        // указатель на вектор ориентации страничного буфера
long length,           // размер массива по X
long sens_num,         // размер массива по Y(количество датчиков)
long filterParam1,     // параметр1 фильтра
long filterParam2,     // параметр2 фильтра
long rolledAmplifer    // параметр усиления фильтра
);

int flt_Skolz_plus_poperek (
KRTDATA* data,         // указатель на массив обработанных данных страницы развертки
KRTROW *rowData,       // указатель на буфер сырых данных для страницы
long *dataOrnt,        // указатель на вектор ориентации страничного буфера
long length,           // размер массива по X
long sens_num,         // размер массива по Y(количество датчиков)
T_SENSOR *sensor,      // указатель на вектор настроек датчиков. для доступа к элементам базовой линии: crz->sensor[i].delta
long Amlification
);

int flt_k_tsentru_plus_poperek (
KRTDATA* data,         // указатель на массив обработанных данных страницы развертки
KRTROW *rowData,       // указатель на буфер сырых данных для страницы
long *dataOrnt,        // указатель на вектор ориентации страничного буфера
long length,           // размер массива по X
long sens_num,         // размер массива по Y(количество датчиков)
T_SENSOR *sensor,      // указатель на вектор настроек датчиков. для доступа к элементам базовой линии: crz->sensor[i].delta
long filterParam,      // параметр усиление 0-64
long FilterLength,     // ширина окна фильтра (1-500 в отсчетах одометра, default = 100)
long AwerageLength     // параметр kolichestvo izmereniy dlya rascheta srednego (1-50, default =25)
);

int flt_ot_tsentra_plus_poperek (
KRTDATA* data,         // указатель на массив обработанных данных страницы развертки
KRTROW *rowData,       // указатель на буфер сырых данных для страницы
long *dataOrnt,        // указатель на вектор ориентации страничного буфера
long length,           // размер массива по X
long sens_num,         // размер массива по Y(количество датчиков)
T_SENSOR *sensor,      // указатель на вектор настроек датчиков. для доступа к элементам базовой линии: crz->sensor[i].delta
long filterParam       // параметр усиление 0-64
);
